"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const n=require("vue"),a=require("./index-D_zVEGCL.cjs"),A=require("./index-B6CjCYtM.cjs"),w=require("./omit-BB_NaH_J.cjs"),m=()=>null;m.isSelectOption=!0;m.displayName="AAutoCompleteOption";const h=()=>null;h.isSelectOptGroup=!0;h.displayName="AAutoCompleteOptGroup";function $(t){var v,e;return((v=t==null?void 0:t.type)===null||v===void 0?void 0:v.isSelectOption)||((e=t==null?void 0:t.type)===null||e===void 0?void 0:e.isSelectOptGroup)}const j=()=>a._extends(a._extends({},w.omit(A.selectProps(),["loading","mode","optionLabelProp","labelInValue"])),{dataSource:Array,dropdownMenuStyle:{type:Object,default:void 0},dropdownMatchSelectWidth:{type:[Number,Boolean],default:!0},prefixCls:String,showSearch:{type:Boolean,default:void 0},transitionName:String,choiceTransitionName:{type:String,default:"zoom"},autofocus:{type:Boolean,default:void 0},backfill:{type:Boolean,default:void 0},filterOption:{type:[Boolean,Function],default:!1},defaultActiveFirstOption:{type:Boolean,default:!0},status:String}),N=n.defineComponent({compatConfig:{MODE:3},name:"AAutoComplete",inheritAttrs:!1,props:j(),slots:Object,setup(t,v){let{slots:e,attrs:O,expose:S}=v;a.warning(!("dataSource"in e),"AutoComplete","`dataSource` slot is deprecated, please use props `options` instead."),a.warning(!("options"in e),"AutoComplete","`options` slot is deprecated, please use props `options` instead."),a.warning(!t.dropdownClassName,"AutoComplete","`dropdownClassName` is deprecated, please use `popupClassName` instead.");const f=n.ref(),u=()=>{var l;const p=a.flattenChildren((l=e.default)===null||l===void 0?void 0:l.call(e));return p.length?p[0]:void 0};S({focus:()=>{var l;(l=f.value)===null||l===void 0||l.focus()},blur:()=>{var l;(l=f.value)===null||l===void 0||l.blur()}});const{prefixCls:r}=a.useConfigInject("select",t);return()=>{var l,p,C;const{size:o,dataSource:s,notFoundContent:c=(l=e.notFoundContent)===null||l===void 0?void 0:l.call(e)}=t;let d;const{class:_}=O,B={[_]:!!_,[`${r.value}-lg`]:o==="large",[`${r.value}-sm`]:o==="small",[`${r.value}-show-search`]:!0,[`${r.value}-auto-complete`]:!0};if(t.options===void 0){const b=((p=e.dataSource)===null||p===void 0?void 0:p.call(e))||((C=e.options)===null||C===void 0?void 0:C.call(e))||[];b.length&&$(b[0])?d=b:d=s?s.map(i=>{if(a.isValidElement(i))return i;switch(typeof i){case"string":return n.createVNode(m,{key:i,value:i},{default:()=>[i]});case"object":return n.createVNode(m,{key:i.value,value:i.value},{default:()=>[i.text]});default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.")}}):[]}const x=w.omit(a._extends(a._extends(a._extends({},t),O),{mode:A.Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,getInputElement:u,notFoundContent:c,class:B,popupClassName:t.popupClassName||t.dropdownClassName,ref:f}),["dataSource","loading"]);return n.createVNode(A.Select,x,a._objectSpread2({default:()=>[d]},w.omit(e,["default","dataSource","options"])))}}}),E=a._extends(N,{Option:m,OptGroup:h,install(t){return t.component(N.name,N),t.component(m.displayName,m),t.component(h.displayName,h),t}}),F=n.defineComponent({__name:"AutoCompleteInput",props:{title:{},value:{},fetchList:{type:[Function,Array]},style:{},enableSplit:{type:Boolean},splitWord:{},placeholder:{}},emits:["update:value"],setup(t,{emit:v}){const e=t,O=v,S=n.ref([]),f=n.ref([]);n.onMounted(async()=>{if(e.fetchList){if(e.fetchList instanceof Function){const o=await e.fetchList();S.value.push(...o)}else S.value.push(...e.fetchList);f.value=S.value}});const u=n.computed({get(){return e.value},set(o){O("update:value",o)}}),y=n.computed(()=>e.splitWord||","),g=n.computed(()=>e.title||""),r=n.computed(()=>!!e.enableSplit),l=(o,s)=>{var d;const c=r.value?(d=s.split(y.value).pop())==null?void 0:d.trim():s;return o.filter(_=>_.value.includes(c||"")&&_.value!==c)},p=o=>{if(r.value){const s=u.value?u.value.endsWith(y.value)?u.value.split(y.value).slice(0,-1):u.value.split(y.value):[],c=u.value?[...s,o].join(y.value):o;u.value=c}else u.value=o},C=o=>{f.value=l(S.value,o)};return(o,s)=>{const c=E;return n.openBlock(),n.createBlock(c,n.mergeProps({value:u.value,"onUpdate:value":s[0]||(s[0]=d=>u.value=d),placeholder:o.placeholder?o.placeholder:`输入${g.value}内容${r.value?"（以"+o.splitWord+"分割）":""} 或选择已有${g.value}`,onSelect:p,options:f.value,onSearch:C},{...o.$attrs,style:e.style}),null,16,["value","placeholder","options"])}}});exports.default=F;
