{"version":3,"file":"AsyncTreeSelect-D2jF4jfa.js","sources":["../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/utils/valueUtil.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/TreeSelectContext.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/OptionList.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/utils/strategyUtil.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/TreeNode.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/utils/legacyUtil.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/hooks/useTreeData.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/hooks/useCache.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/hooks/useDataEntities.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/hooks/useCheckedKeys.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/hooks/useFilterTreeData.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/utils/warningPropsUtil.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/vc-tree-select/TreeSelect.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/tree-select/style/index.js","../../../../node_modules/.pnpm/ant-design-vue@4.2.3_vue@3.4.27_typescript@5.4.5_/node_modules/ant-design-vue/es/tree-select/index.js","../../../../qc-components/dynamic-form/components/AsyncTreeSelect.vue"],"sourcesContent":["export function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return value !== undefined ? [value] : [];\n}\nexport function fillFieldNames(fieldNames) {\n  const {\n    label,\n    value,\n    children\n  } = fieldNames || {};\n  const mergedValue = value || 'value';\n  return {\n    _title: label ? [label] : ['title', 'label'],\n    value: mergedValue,\n    key: mergedValue,\n    children: children || 'children'\n  };\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n/** Loop fetch all the keys exist in the tree */\nexport function getAllKeys(treeData, fieldNames) {\n  const keys = [];\n  function dig(list) {\n    list.forEach(item => {\n      keys.push(item[fieldNames.value]);\n      const children = item[fieldNames.children];\n      if (children) {\n        dig(children);\n      }\n    });\n  }\n  dig(treeData);\n  return keys;\n}\nexport function isNil(val) {\n  return val === null || val === undefined;\n}","import { provide, inject } from 'vue';\nconst TreeSelectContextPropsKey = Symbol('TreeSelectContextPropsKey');\nexport function useProvideSelectContext(props) {\n  return provide(TreeSelectContextPropsKey, props);\n}\nexport default function useInjectSelectContext() {\n  return inject(TreeSelectContextPropsKey, {});\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\nimport { computed, defineComponent, nextTick, ref, shallowRef, toRaw, watch } from 'vue';\nimport useMemo from '../_util/hooks/useMemo';\nimport KeyCode from '../_util/KeyCode';\nimport Tree from '../vc-tree/Tree';\nimport { getAllKeys, isCheckDisabled } from './utils/valueUtil';\nimport { useBaseProps } from '../vc-select';\nimport useInjectLegacySelectContext from './LegacyContext';\nimport useInjectSelectContext from './TreeSelectContext';\nconst HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'OptionList',\n  inheritAttrs: false,\n  setup(_, _ref) {\n    let {\n      slots,\n      expose\n    } = _ref;\n    const baseProps = useBaseProps();\n    const legacyContext = useInjectLegacySelectContext();\n    const context = useInjectSelectContext();\n    const treeRef = ref();\n    const memoTreeData = useMemo(() => context.treeData, [() => baseProps.open, () => context.treeData], next => next[0]);\n    const mergedCheckedKeys = computed(() => {\n      const {\n        checkable,\n        halfCheckedKeys,\n        checkedKeys\n      } = legacyContext;\n      if (!checkable) {\n        return null;\n      }\n      return {\n        checked: checkedKeys,\n        halfChecked: halfCheckedKeys\n      };\n    });\n    watch(() => baseProps.open, () => {\n      nextTick(() => {\n        var _a;\n        if (baseProps.open && !baseProps.multiple && legacyContext.checkedKeys.length) {\n          (_a = treeRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo({\n            key: legacyContext.checkedKeys[0]\n          });\n        }\n      });\n    }, {\n      immediate: true,\n      flush: 'post'\n    });\n    // ========================== Search ==========================\n    const lowerSearchValue = computed(() => String(baseProps.searchValue).toLowerCase());\n    const filterTreeNode = treeNode => {\n      if (!lowerSearchValue.value) {\n        return false;\n      }\n      return String(treeNode[legacyContext.treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue.value);\n    };\n    // =========================== Keys ===========================\n    const expandedKeys = shallowRef(legacyContext.treeDefaultExpandedKeys);\n    const searchExpandedKeys = shallowRef(null);\n    watch(() => baseProps.searchValue, () => {\n      if (baseProps.searchValue) {\n        searchExpandedKeys.value = getAllKeys(toRaw(context.treeData), toRaw(context.fieldNames));\n      }\n    }, {\n      immediate: true\n    });\n    const mergedExpandedKeys = computed(() => {\n      if (legacyContext.treeExpandedKeys) {\n        return legacyContext.treeExpandedKeys.slice();\n      }\n      return baseProps.searchValue ? searchExpandedKeys.value : expandedKeys.value;\n    });\n    const onInternalExpand = keys => {\n      var _a;\n      expandedKeys.value = keys;\n      searchExpandedKeys.value = keys;\n      (_a = legacyContext.onTreeExpand) === null || _a === void 0 ? void 0 : _a.call(legacyContext, keys);\n    };\n    // ========================== Events ==========================\n    const onListMouseDown = event => {\n      event.preventDefault();\n    };\n    const onInternalSelect = (_, _ref2) => {\n      let {\n        node\n      } = _ref2;\n      var _a, _b;\n      const {\n        checkable,\n        checkedKeys\n      } = legacyContext;\n      if (checkable && isCheckDisabled(node)) {\n        return;\n      }\n      (_a = context.onSelect) === null || _a === void 0 ? void 0 : _a.call(context, node.key, {\n        selected: !checkedKeys.includes(node.key)\n      });\n      if (!baseProps.multiple) {\n        (_b = baseProps.toggleOpen) === null || _b === void 0 ? void 0 : _b.call(baseProps, false);\n      }\n    };\n    // ========================= Keyboard =========================\n    const activeKey = ref(null);\n    const activeEntity = computed(() => legacyContext.keyEntities[activeKey.value]);\n    const setActiveKey = key => {\n      activeKey.value = key;\n    };\n    expose({\n      scrollTo: function () {\n        var _a, _b;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return (_b = (_a = treeRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo) === null || _b === void 0 ? void 0 : _b.call(_a, ...args);\n      },\n      onKeydown: event => {\n        var _a;\n        const {\n          which\n        } = event;\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_a = treeRef.value) === null || _a === void 0 ? void 0 : _a.onKeydown(event);\n            break;\n          // >>> Select item\n          case KeyCode.ENTER:\n            {\n              if (activeEntity.value) {\n                const {\n                  selectable,\n                  value\n                } = activeEntity.value.node || {};\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey.value\n                    },\n                    selected: !legacyContext.checkedKeys.includes(value)\n                  });\n                }\n              }\n              break;\n            }\n          // >>> Close\n          case KeyCode.ESC:\n            {\n              baseProps.toggleOpen(false);\n            }\n        }\n      },\n      onKeyup: () => {}\n    });\n    return () => {\n      var _a;\n      const {\n        prefixCls,\n        multiple,\n        searchValue,\n        open,\n        notFoundContent = (_a = slots.notFoundContent) === null || _a === void 0 ? void 0 : _a.call(slots)\n      } = baseProps;\n      const {\n        listHeight,\n        listItemHeight,\n        virtual,\n        dropdownMatchSelectWidth,\n        treeExpandAction\n      } = context;\n      const {\n        checkable,\n        treeDefaultExpandAll,\n        treeIcon,\n        showTreeIcon,\n        switcherIcon,\n        treeLine,\n        loadData,\n        treeLoadedKeys,\n        treeMotion,\n        onTreeLoad,\n        checkedKeys\n      } = legacyContext;\n      // ========================== Render ==========================\n      if (memoTreeData.value.length === 0) {\n        return _createVNode(\"div\", {\n          \"role\": \"listbox\",\n          \"class\": `${prefixCls}-empty`,\n          \"onMousedown\": onListMouseDown\n        }, [notFoundContent]);\n      }\n      const treeProps = {\n        fieldNames: context.fieldNames\n      };\n      if (treeLoadedKeys) {\n        treeProps.loadedKeys = treeLoadedKeys;\n      }\n      if (mergedExpandedKeys.value) {\n        treeProps.expandedKeys = mergedExpandedKeys.value;\n      }\n      return _createVNode(\"div\", {\n        \"onMousedown\": onListMouseDown\n      }, [activeEntity.value && open && _createVNode(\"span\", {\n        \"style\": HIDDEN_STYLE,\n        \"aria-live\": \"assertive\"\n      }, [activeEntity.value.node.value]), _createVNode(Tree, _objectSpread(_objectSpread({\n        \"ref\": treeRef,\n        \"focusable\": false,\n        \"prefixCls\": `${prefixCls}-tree`,\n        \"treeData\": memoTreeData.value,\n        \"height\": listHeight,\n        \"itemHeight\": listItemHeight,\n        \"virtual\": virtual !== false && dropdownMatchSelectWidth !== false,\n        \"multiple\": multiple,\n        \"icon\": treeIcon,\n        \"showIcon\": showTreeIcon,\n        \"switcherIcon\": switcherIcon,\n        \"showLine\": treeLine,\n        \"loadData\": searchValue ? null : loadData,\n        \"motion\": treeMotion,\n        \"activeKey\": activeKey.value,\n        \"checkable\": checkable,\n        \"checkStrictly\": true,\n        \"checkedKeys\": mergedCheckedKeys.value,\n        \"selectedKeys\": !checkable ? checkedKeys : [],\n        \"defaultExpandAll\": treeDefaultExpandAll\n      }, treeProps), {}, {\n        \"onActiveChange\": setActiveKey,\n        \"onSelect\": onInternalSelect,\n        \"onCheck\": onInternalSelect,\n        \"onExpand\": onInternalExpand,\n        \"onLoad\": onTreeLoad,\n        \"filterTreeNode\": filterTreeNode,\n        \"expandAction\": treeExpandAction\n      }), _extends(_extends({}, slots), {\n        checkable: legacyContext.customSlots.treeCheckable\n      }))]);\n    };\n  }\n});","import { isCheckDisabled } from './valueUtil';\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const SHOW_PARENT = 'SHOW_PARENT';\nexport const SHOW_CHILD = 'SHOW_CHILD';\nexport function formatStrategyValues(values, strategy, keyEntities, fieldNames) {\n  const valueSet = new Set(values);\n  if (strategy === SHOW_CHILD) {\n    return values.filter(key => {\n      const entity = keyEntities[key];\n      if (entity && entity.children && entity.children.some(_ref => {\n        let {\n          node\n        } = _ref;\n        return valueSet.has(node[fieldNames.value]);\n      }) && entity.children.every(_ref2 => {\n        let {\n          node\n        } = _ref2;\n        return isCheckDisabled(node) || valueSet.has(node[fieldNames.value]);\n      })) {\n        return false;\n      }\n      return true;\n    });\n  }\n  if (strategy === SHOW_PARENT) {\n    return values.filter(key => {\n      const entity = keyEntities[key];\n      const parent = entity ? entity.parent : null;\n      if (parent && !isCheckDisabled(parent.node) && valueSet.has(parent.key)) {\n        return false;\n      }\n      return true;\n    });\n  }\n  return values;\n}","/* istanbul ignore file */\n/** This is a placeholder, not real render in dom */\nconst TreeNode = () => null;\nTreeNode.inheritAttrs = false;\nTreeNode.displayName = 'ATreeSelectNode';\nTreeNode.isTreeSelectNode = true;\nexport default TreeNode;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { camelize, filterEmpty } from '../../_util/props-util';\nimport { warning } from '../../vc-util/warning';\nimport TreeNode from '../TreeNode';\nfunction isTreeSelectNode(node) {\n  return node && node.type && node.type.isTreeSelectNode;\n}\nexport function convertChildrenToData(rootNodes) {\n  function dig() {\n    let treeNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return filterEmpty(treeNodes).map(treeNode => {\n      var _a, _b, _c;\n      // Filter invalidate node\n      if (!isTreeSelectNode(treeNode)) {\n        warning(!treeNode, 'TreeSelect/TreeSelectNode can only accept TreeSelectNode as children.');\n        return null;\n      }\n      const slots = treeNode.children || {};\n      const key = treeNode.key;\n      const props = {};\n      for (const [k, v] of Object.entries(treeNode.props)) {\n        props[camelize(k)] = v;\n      }\n      const {\n        isLeaf,\n        checkable,\n        selectable,\n        disabled,\n        disableCheckbox\n      } = props;\n      // 默认值为 undefined\n      const newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      const slotsProps = _extends(_extends({}, props), newProps);\n      const {\n          title = (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps),\n          switcherIcon = (_b = slots.switcherIcon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps)\n        } = props,\n        rest = __rest(props, [\"title\", \"switcherIcon\"]);\n      const children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);\n      const dataNode = _extends(_extends(_extends({}, rest), {\n        title,\n        switcherIcon,\n        key,\n        isLeaf\n      }), newProps);\n      const parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\nexport function fillLegacyProps(dataNode) {\n  // Skip if not dataNode exist\n  if (!dataNode) {\n    return dataNode;\n  }\n  const cloneNode = _extends({}, dataNode);\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get() {\n        warning(false, 'New `vc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition, fieldNames) {\n  let triggerNode = null;\n  let nodeList = null;\n  function generateMap() {\n    function dig(list) {\n      let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      let parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map((option, index) => {\n        const pos = `${level}-${index}`;\n        const value = option[fieldNames.value];\n        const included = checkedValues.includes(value);\n        const children = dig(option[fieldNames.children] || [], pos, included);\n        const node = _createVNode(TreeNode, option, {\n          default: () => [children.map(child => child.node)]\n        });\n        // Link with trigger node\n        if (triggerValue === value) {\n          triggerNode = node;\n        }\n        if (included) {\n          const checkedNode = {\n            pos,\n            node,\n            children\n          };\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n          return checkedNode;\n        }\n        return null;\n      }).filter(node => node);\n    }\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData);\n      // Sort to keep the checked node length\n      nodeList.sort((_ref, _ref2) => {\n        let {\n          node: {\n            props: {\n              value: val1\n            }\n          }\n        } = _ref;\n        let {\n          node: {\n            props: {\n              value: val2\n            }\n          }\n        } = _ref2;\n        const index1 = checkedValues.indexOf(val1);\n        const index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n  Object.defineProperty(extra, 'triggerNode', {\n    get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      if (showPosition) {\n        return nodeList;\n      }\n      return nodeList.map(_ref3 => {\n        let {\n          node\n        } = _ref3;\n        return node;\n      });\n    }\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { shallowRef, watch, toRaw } from 'vue';\nimport { convertChildrenToData } from '../utils/legacyUtil';\nfunction parseSimpleTreeData(treeData, _ref) {\n  let {\n    id,\n    pId,\n    rootPId\n  } = _ref;\n  const keyNodes = {};\n  const rootNodeList = [];\n  // Fill in the map\n  const nodeList = treeData.map(node => {\n    const clone = _extends({}, node);\n    const key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  });\n  // Connect tree\n  nodeList.forEach(node => {\n    const parentKey = node[pId];\n    const parent = keyNodes[parentKey];\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\nexport default function useTreeData(treeData, children, simpleMode) {\n  const mergedTreeData = shallowRef();\n  watch([simpleMode, treeData, children], () => {\n    const simpleModeValue = simpleMode.value;\n    if (treeData.value) {\n      mergedTreeData.value = simpleMode.value ? parseSimpleTreeData(toRaw(treeData.value), _extends({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleModeValue !== true ? simpleModeValue : {})) : toRaw(treeData.value).slice();\n    } else {\n      mergedTreeData.value = convertChildrenToData(toRaw(children.value));\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return mergedTreeData;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { watch, toRaw, computed, shallowRef } from 'vue';\n/**\n * This function will try to call requestIdleCallback if available to save performance.\n * No need `getLabel` here since already fetch on `rawLabeledValue`.\n */\nexport default (values => {\n  const cacheRef = shallowRef({\n    valueLabels: new Map()\n  });\n  const mergedValues = shallowRef();\n  watch(values, () => {\n    mergedValues.value = toRaw(values.value);\n  }, {\n    immediate: true\n  });\n  const newFilledValues = computed(() => {\n    const {\n      valueLabels\n    } = cacheRef.value;\n    const valueLabelsCache = new Map();\n    const filledValues = mergedValues.value.map(item => {\n      var _a;\n      const {\n        value\n      } = item;\n      const mergedLabel = (_a = item.label) !== null && _a !== void 0 ? _a : valueLabels.get(value);\n      // Save in cache\n      valueLabelsCache.set(value, mergedLabel);\n      return _extends(_extends({}, item), {\n        label: mergedLabel\n      });\n    });\n    cacheRef.value.valueLabels = valueLabelsCache;\n    return filledValues;\n  });\n  return [newFilledValues];\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { isNil } from '../utils/valueUtil';\nimport { shallowRef, watchEffect } from 'vue';\nimport { warning } from '../../vc-util/warning';\nexport default ((treeData, fieldNames) => {\n  const valueEntities = shallowRef(new Map());\n  const keyEntities = shallowRef({});\n  watchEffect(() => {\n    const fieldNamesValue = fieldNames.value;\n    const collection = convertDataToEntities(treeData.value, {\n      fieldNames: fieldNamesValue,\n      initWrapper: wrapper => _extends(_extends({}, wrapper), {\n        valueEntities: new Map()\n      }),\n      processEntity: (entity, wrapper) => {\n        const val = entity.node[fieldNamesValue.value];\n        // Check if exist same value\n        if (process.env.NODE_ENV !== 'production') {\n          const key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), `Same \\`value\\` exist in the tree: ${val}`);\n          warning(!key || String(key) === String(val), `\\`key\\` or \\`value\\` with TreeNode must be the same or you can remove one of them. key: ${key}, value: ${val}.`);\n        }\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    valueEntities.value = collection.valueEntities;\n    keyEntities.value = collection.keyEntities;\n  });\n  return {\n    valueEntities,\n    keyEntities\n  };\n});","import { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { shallowRef, watchEffect } from 'vue';\nexport default ((rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities, maxLevel, levelEntities) => {\n  const newRawCheckedValues = shallowRef([]);\n  const newRawHalfCheckedValues = shallowRef([]);\n  watchEffect(() => {\n    let checkedKeys = rawLabeledValues.value.map(_ref => {\n      let {\n        value\n      } = _ref;\n      return value;\n    });\n    let halfCheckedKeys = rawHalfCheckedValues.value.map(_ref2 => {\n      let {\n        value\n      } = _ref2;\n      return value;\n    });\n    const missingValues = checkedKeys.filter(key => !keyEntities.value[key]);\n    if (treeConduction.value) {\n      ({\n        checkedKeys,\n        halfCheckedKeys\n      } = conductCheck(checkedKeys, true, keyEntities.value, maxLevel.value, levelEntities.value));\n    }\n    newRawCheckedValues.value = Array.from(new Set([...missingValues, ...checkedKeys]));\n    newRawHalfCheckedValues.value = halfCheckedKeys;\n  });\n  return [newRawCheckedValues, newRawHalfCheckedValues];\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default ((treeData, searchValue, _ref) => {\n  let {\n    treeNodeFilterProp,\n    filterTreeNode,\n    fieldNames\n  } = _ref;\n  return computed(() => {\n    const {\n      children: fieldChildren\n    } = fieldNames.value;\n    const searchValueVal = searchValue.value;\n    const treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    let filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      const upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = (_, dataNode) => {\n        const value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      let keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const res = [];\n      for (let index = 0, len = list.length; index < len; index++) {\n        const dataNode = list[index];\n        const children = dataNode[fieldChildren];\n        const match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        const childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_extends(_extends({}, dataNode), {\n            [fieldChildren]: childList\n          }));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});","import { warning } from '../../vc-util/warning';\nimport { toArray } from './valueUtil';\nfunction warningProps(props) {\n  const {\n    searchPlaceholder,\n    treeCheckStrictly,\n    treeCheckable,\n    labelInValue,\n    value,\n    multiple\n  } = props;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed, please use `placeholder` instead');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(val => val && typeof val === 'object' && 'value' in val), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport OptionList from './OptionList';\nimport { formatStrategyValues, SHOW_CHILD } from './utils/strategyUtil';\nimport { useProvideSelectContext } from './TreeSelectContext';\nimport { useProvideLegacySelectContext } from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport { baseSelectPropsWithoutPrivate } from '../vc-select/BaseSelect';\nimport { computed, defineComponent, ref, shallowRef, toRaw, toRef, toRefs, watchEffect } from 'vue';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport { BaseSelect } from '../vc-select';\nimport { initDefaultProps } from '../_util/props-util';\nimport useId from '../vc-select/hooks/useId';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport { conductCheck } from '../vc-tree/utils/conductUtil';\nimport { warning } from '../vc-util/warning';\nimport { toReactive } from '../_util/toReactive';\nimport useMaxLevel from '../vc-tree/useMaxLevel';\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(baseSelectPropsWithoutPrivate(), ['mode'])), {\n    prefixCls: String,\n    id: String,\n    value: {\n      type: [String, Number, Object, Array]\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    onChange: {\n      type: Function\n    },\n    searchValue: String,\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    onSearch: {\n      type: Function\n    },\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    filterTreeNode: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    treeNodeFilterProp: String,\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    showCheckedStrategy: {\n      type: String\n    },\n    treeNodeLabelProp: String,\n    fieldNames: {\n      type: Object\n    },\n    // >>> Mode\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckable: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckStrictly: {\n      type: Boolean,\n      default: undefined\n    },\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Data\n    treeData: {\n      type: Array\n    },\n    treeDataSimpleMode: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    loadData: {\n      type: Function\n    },\n    treeLoadedKeys: {\n      type: Array\n    },\n    onTreeLoad: {\n      type: Function\n    },\n    // >>> Expanded\n    treeDefaultExpandAll: {\n      type: Boolean,\n      default: undefined\n    },\n    treeExpandedKeys: {\n      type: Array\n    },\n    treeDefaultExpandedKeys: {\n      type: Array\n    },\n    onTreeExpand: {\n      type: Function\n    },\n    // >>> Options\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    onDropdownVisibleChange: {\n      type: Function\n    },\n    // >>> Tree\n    treeLine: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    treeIcon: PropTypes.any,\n    showTreeIcon: {\n      type: Boolean,\n      default: undefined\n    },\n    switcherIcon: PropTypes.any,\n    treeMotion: PropTypes.any,\n    children: Array,\n    treeExpandAction: String,\n    showArrow: {\n      type: Boolean,\n      default: undefined\n    },\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    defaultOpen: {\n      type: Boolean,\n      default: undefined\n    },\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    maxTagPlaceholder: {\n      type: Function\n    },\n    dropdownPopupAlign: PropTypes.any,\n    customSlots: Object\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'TreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    treeNodeFilterProp: 'value',\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    listHeight: 200,\n    listItemHeight: 20,\n    prefixCls: 'vc-tree-select'\n  }),\n  setup(props, _ref) {\n    let {\n      attrs,\n      expose,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const treeConduction = computed(() => props.treeCheckable && !props.treeCheckStrictly);\n    const mergedCheckable = computed(() => props.treeCheckable || props.treeCheckStrictly);\n    const mergedLabelInValue = computed(() => props.treeCheckStrictly || props.labelInValue);\n    const mergedMultiple = computed(() => mergedCheckable.value || props.multiple);\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      });\n    }\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    const onInternalSearch = searchText => {\n      var _a;\n      setSearchValue(searchText);\n      (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n    };\n    // ============================ Data ============================\n    // `useTreeData` only do convert of `children` or `simpleMode`.\n    // Else will return origin `treeData` for perf consideration.\n    // Do not do anything to loop the data.\n    const mergedTreeData = useTreeData(toRef(props, 'treeData'), toRef(props, 'children'), toRef(props, 'treeDataSimpleMode'));\n    const {\n      keyEntities,\n      valueEntities\n    } = useDataEntities(mergedTreeData, mergedFieldNames);\n    /** Get `missingRawValues` which not exist in the tree yet */\n    const splitRawValues = newRawValues => {\n      const missingRawValues = [];\n      const existRawValues = [];\n      // Keep missing value in the cache\n      newRawValues.forEach(val => {\n        if (valueEntities.value.has(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues,\n        existRawValues\n      };\n    };\n    // Filtered Tree\n    const filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n      fieldNames: mergedFieldNames,\n      treeNodeFilterProp: toRef(props, 'treeNodeFilterProp'),\n      filterTreeNode: toRef(props, 'filterTreeNode')\n    });\n    // =========================== Label ============================\n    const getLabel = item => {\n      if (item) {\n        if (props.treeNodeLabelProp) {\n          return item[props.treeNodeLabelProp];\n        }\n        // Loop from fieldNames\n        const {\n          _title: titleList\n        } = mergedFieldNames.value;\n        for (let i = 0; i < titleList.length; i += 1) {\n          const title = item[titleList[i]];\n          if (title !== undefined) {\n            return title;\n          }\n        }\n      }\n    };\n    // ========================= Wrap Value =========================\n    const toLabeledValues = draftValues => {\n      const values = toArray(draftValues);\n      return values.map(val => {\n        if (isRawValue(val)) {\n          return {\n            value: val\n          };\n        }\n        return val;\n      });\n    };\n    const convert2LabelValues = draftValues => {\n      const values = toLabeledValues(draftValues);\n      return values.map(item => {\n        let {\n          label: rawLabel\n        } = item;\n        const {\n          value: rawValue,\n          halfChecked: rawHalfChecked\n        } = item;\n        let rawDisabled;\n        const entity = valueEntities.value.get(rawValue);\n        // Fill missing label & status\n        if (entity) {\n          rawLabel = rawLabel !== null && rawLabel !== void 0 ? rawLabel : getLabel(entity.node);\n          rawDisabled = entity.node.disabled;\n        }\n        return {\n          label: rawLabel,\n          value: rawValue,\n          halfChecked: rawHalfChecked,\n          disabled: rawDisabled\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    const rawMixedLabeledValues = computed(() => toLabeledValues(internalValue.value));\n    // Split value into full check and half check\n    const rawLabeledValues = shallowRef([]);\n    const rawHalfLabeledValues = shallowRef([]);\n    watchEffect(() => {\n      const fullCheckValues = [];\n      const halfCheckValues = [];\n      rawMixedLabeledValues.value.forEach(item => {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      rawLabeledValues.value = fullCheckValues;\n      rawHalfLabeledValues.value = halfCheckValues;\n    });\n    // const [mergedValues] = useCache(rawLabeledValues);\n    const rawValues = computed(() => rawLabeledValues.value.map(item => item.value));\n    const {\n      maxLevel,\n      levelEntities\n    } = useMaxLevel(keyEntities);\n    // Convert value to key. Will fill missed keys for conduct check.\n    const [rawCheckedValues, rawHalfCheckedValues] = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities, maxLevel, levelEntities);\n    // Convert rawCheckedKeys to check strategy related values\n    const displayValues = computed(() => {\n      // Collect keys which need to show\n      const displayKeys = formatStrategyValues(rawCheckedValues.value, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n      // Convert to value and filled with label\n      const values = displayKeys.map(key => {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = keyEntities.value[key]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b[mergedFieldNames.value.value]) !== null && _c !== void 0 ? _c : key;\n      });\n      // Back fill with origin label\n      const labeledValues = values.map(val => {\n        const targetItem = rawLabeledValues.value.find(item => item.value === val);\n        return {\n          value: val,\n          label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n        };\n      });\n      const rawDisplayValues = convert2LabelValues(labeledValues);\n      const firstVal = rawDisplayValues[0];\n      if (!mergedMultiple.value && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n        return [];\n      }\n      return rawDisplayValues.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    const [cachedDisplayValues] = useCache(displayValues);\n    // =========================== Change ===========================\n    const triggerChange = (newRawValues, extra, source) => {\n      const labeledValues = convert2LabelValues(newRawValues);\n      setInternalValue(labeledValues);\n      // Clean up if needed\n      if (props.autoClearSearchValue) {\n        setSearchValue('');\n      }\n      // Generate rest parameters is costly, so only do it when necessary\n      if (props.onChange) {\n        let eventValues = newRawValues;\n        if (treeConduction.value) {\n          const formattedKeyList = formatStrategyValues(newRawValues, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n          eventValues = formattedKeyList.map(key => {\n            const entity = valueEntities.value.get(key);\n            return entity ? entity.node[mergedFieldNames.value.value] : key;\n          });\n        }\n        const {\n          triggerValue,\n          selected\n        } = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        };\n        let returnRawValues = eventValues;\n        // We need fill half check back\n        if (props.treeCheckStrictly) {\n          const halfValues = rawHalfLabeledValues.value.filter(item => !eventValues.includes(item.value));\n          returnRawValues = [...returnRawValues, ...halfValues];\n        }\n        const returnLabeledValues = convert2LabelValues(returnRawValues);\n        const additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: rawLabeledValues.value,\n          triggerValue\n        };\n        // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n        let showPosition = true;\n        if (props.treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData.value, showPosition, mergedFieldNames.value);\n        if (mergedCheckable.value) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        const returnValues = mergedLabelInValue.value ? returnLabeledValues : returnLabeledValues.map(item => item.value);\n        props.onChange(mergedMultiple.value ? returnValues : returnValues[0], mergedLabelInValue.value ? null : returnLabeledValues.map(item => item.label), additionalInfo);\n      }\n    };\n    // ========================== Options ===========================\n    /** Trigger by option list */\n    const onOptionSelect = (selectedKey, _ref2) => {\n      let {\n        selected,\n        source\n      } = _ref2;\n      var _a, _b, _c;\n      const keyEntitiesValue = toRaw(keyEntities.value);\n      const valueEntitiesValue = toRaw(valueEntities.value);\n      const entity = keyEntitiesValue[selectedKey];\n      const node = entity === null || entity === void 0 ? void 0 : entity.node;\n      const selectedValue = (_a = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value.value]) !== null && _a !== void 0 ? _a : selectedKey;\n      // Never be falsy but keep it safe\n      if (!mergedMultiple.value) {\n        // Single mode always set value\n        triggerChange([selectedValue], {\n          selected: true,\n          triggerValue: selectedValue\n        }, 'option');\n      } else {\n        let newRawValues = selected ? [...rawValues.value, selectedValue] : rawCheckedValues.value.filter(v => v !== selectedValue);\n        // Add keys if tree conduction\n        if (treeConduction.value) {\n          // Should keep missing values\n          const {\n            missingRawValues,\n            existRawValues\n          } = splitRawValues(newRawValues);\n          const keyList = existRawValues.map(val => valueEntitiesValue.get(val).key);\n          // Conduction by selected or not\n          let checkedKeys;\n          if (selected) {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, true, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          } else {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, {\n              checked: false,\n              halfCheckedKeys: rawHalfCheckedValues.value\n            }, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          }\n          // Fill back of keys\n          newRawValues = [...missingRawValues, ...checkedKeys.map(key => keyEntitiesValue[key].node[mergedFieldNames.value.value])];\n        }\n        triggerChange(newRawValues, {\n          selected,\n          triggerValue: selectedValue\n        }, source || 'option');\n      }\n      // Trigger select event\n      if (selected || !mergedMultiple.value) {\n        (_b = props.onSelect) === null || _b === void 0 ? void 0 : _b.call(props, selectedValue, fillLegacyProps(node));\n      } else {\n        (_c = props.onDeselect) === null || _c === void 0 ? void 0 : _c.call(props, selectedValue, fillLegacyProps(node));\n      }\n    };\n    // ========================== Dropdown ==========================\n    const onInternalDropdownVisibleChange = open => {\n      if (props.onDropdownVisibleChange) {\n        const legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        props.onDropdownVisibleChange(open, legacyParam);\n      }\n    };\n    // ====================== Display Change ========================\n    const onDisplayValuesChange = (newValues, info) => {\n      const newRawValues = newValues.map(item => item.value);\n      if (info.type === 'clear') {\n        triggerChange(newRawValues, {}, 'selection');\n        return;\n      }\n      // TreeSelect only have multiple mode which means display change only has remove\n      if (info.values.length) {\n        onOptionSelect(info.values[0].value, {\n          selected: false,\n          source: 'selection'\n        });\n      }\n    };\n    const {\n      treeNodeFilterProp,\n      // Data\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      // Expanded\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      // Options\n      virtual,\n      listHeight,\n      listItemHeight,\n      // Tree\n      treeLine,\n      treeIcon,\n      showTreeIcon,\n      switcherIcon,\n      treeMotion,\n      customSlots,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    } = toRefs(props);\n    useProvideLegacySelectContext(toReactive({\n      checkable: mergedCheckable,\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      treeIcon,\n      treeMotion,\n      showTreeIcon,\n      switcherIcon,\n      treeLine,\n      treeNodeFilterProp,\n      keyEntities,\n      customSlots\n    }));\n    useProvideSelectContext(toReactive({\n      virtual,\n      listHeight,\n      listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    }));\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    return () => {\n      var _a;\n      const restProps = omit(props, ['id', 'prefixCls', 'customSlots',\n      // Value\n      'value', 'defaultValue', 'onChange', 'onSelect', 'onDeselect',\n      // Search\n      'searchValue', 'inputValue', 'onSearch', 'autoClearSearchValue', 'filterTreeNode', 'treeNodeFilterProp',\n      // Selector\n      'showCheckedStrategy', 'treeNodeLabelProp',\n      //  Mode\n      'multiple', 'treeCheckable', 'treeCheckStrictly', 'labelInValue',\n      // FieldNames\n      'fieldNames',\n      // Data\n      'treeDataSimpleMode', 'treeData', 'children', 'loadData', 'treeLoadedKeys', 'onTreeLoad',\n      // Expanded\n      'treeDefaultExpandAll', 'treeExpandedKeys', 'treeDefaultExpandedKeys', 'onTreeExpand',\n      // Options\n      'virtual', 'listHeight', 'listItemHeight', 'onDropdownVisibleChange',\n      // Tree\n      'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeMotion']);\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({\n        \"ref\": selectRef\n      }, attrs), restProps), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"mode\": mergedMultiple.value ? 'multiple' : undefined,\n        \"displayValues\": cachedDisplayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !mergedTreeData.value.length,\n        \"onDropdownVisibleChange\": onInternalDropdownVisibleChange,\n        \"tagRender\": props.tagRender || slots.tagRender,\n        \"dropdownMatchSelectWidth\": (_a = props.dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : true\n      }), slots);\n    };\n  }\n});","import { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genTreeStyle } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${token.paddingXS}px ${token.paddingXS / 2}px`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        '&-list-holder-inner': {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls) {\n  return genComponentStyleHook('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls: treePrefixCls.value\n    });\n    return [genBaseStyle(treeSelectToken)];\n  })(prefixCls);\n}","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\nimport { computed, ref, defineComponent } from 'vue';\nimport VcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, treeSelectProps as vcTreeSelectProps } from '../vc-tree-select';\nimport classNames from '../_util/classNames';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport useConfigInject from '../config-provider/hooks/useConfigInject';\nimport devWarning from '../vc-util/devWarning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport { warning } from '../vc-util/warning';\nimport { flattenChildren } from '../_util/props-util';\nimport { FormItemInputContext, useInjectFormItemContext } from '../form/FormItemContext';\nimport { getTransitionDirection } from '../_util/transition';\nimport { getStatusClassNames, getMergedStatus } from '../_util/statusUtils';\nimport { booleanType, stringType, objectType, someType, functionType } from '../_util/type';\n// CSSINJS\nimport useSelectStyle from '../select/style';\nimport useStyle from './style';\nimport { useCompactItemContext } from '../space/Compact';\nimport { useInjectDisabled } from '../config-provider/DisabledContext';\nconst getTransitionName = (rootPrefixCls, motion, transitionName) => {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n  return `${rootPrefixCls}-${motion}`;\n};\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(vcTreeSelectProps(), ['showTreeIcon', 'treeMotion', 'inputIcon', 'getInputElement', 'treeLine', 'customSlots'])), {\n    suffixIcon: PropTypes.any,\n    size: stringType(),\n    bordered: booleanType(),\n    treeLine: someType([Boolean, Object]),\n    replaceFields: objectType(),\n    placement: stringType(),\n    status: stringType(),\n    popupClassName: String,\n    /** @deprecated Please use `popupClassName` instead */\n    dropdownClassName: String,\n    'onUpdate:value': functionType(),\n    'onUpdate:treeExpandedKeys': functionType(),\n    'onUpdate:searchValue': functionType()\n  });\n}\nconst TreeSelect = defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'ATreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    choiceTransitionName: '',\n    listHeight: 256,\n    treeIcon: false,\n    listItemHeight: 26,\n    bordered: true\n  }),\n  slots: Object,\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      expose,\n      emit\n    } = _ref;\n    warning(!(props.treeData === undefined && slots.default), '`children` of TreeSelect is deprecated. Please use `treeData` instead.');\n    devWarning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true');\n    devWarning(props.replaceFields === undefined, 'TreeSelect', '`replaceFields` is deprecated, please use fieldNames instead');\n    devWarning(!props.dropdownClassName, 'TreeSelect', '`dropdownClassName` is deprecated. Please use `popupClassName` instead.');\n    const formItemContext = useInjectFormItemContext();\n    const formItemInputContext = FormItemInputContext.useInject();\n    const mergedStatus = computed(() => getMergedStatus(formItemInputContext.status, props.status));\n    const {\n      prefixCls,\n      renderEmpty,\n      direction,\n      virtual,\n      dropdownMatchSelectWidth,\n      size: contextSize,\n      getPopupContainer,\n      getPrefixCls,\n      disabled\n    } = useConfigInject('select', props);\n    const {\n      compactSize,\n      compactItemClassnames\n    } = useCompactItemContext(prefixCls, direction);\n    const mergedSize = computed(() => compactSize.value || contextSize.value);\n    const contextDisabled = useInjectDisabled();\n    const mergedDisabled = computed(() => {\n      var _a;\n      return (_a = disabled.value) !== null && _a !== void 0 ? _a : contextDisabled.value;\n    });\n    const rootPrefixCls = computed(() => getPrefixCls());\n    // ===================== Placement =====================\n    const placement = computed(() => {\n      if (props.placement !== undefined) {\n        return props.placement;\n      }\n      return direction.value === 'rtl' ? 'bottomRight' : 'bottomLeft';\n    });\n    const transitionName = computed(() => getTransitionName(rootPrefixCls.value, getTransitionDirection(placement.value), props.transitionName));\n    const choiceTransitionName = computed(() => getTransitionName(rootPrefixCls.value, '', props.choiceTransitionName));\n    const treePrefixCls = computed(() => getPrefixCls('select-tree', props.prefixCls));\n    const treeSelectPrefixCls = computed(() => getPrefixCls('tree-select', props.prefixCls));\n    // style\n    const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);\n    const [wrapTreeSelectSSR] = useStyle(treeSelectPrefixCls, treePrefixCls);\n    const mergedDropdownClassName = computed(() => classNames(props.popupClassName || props.dropdownClassName, `${treeSelectPrefixCls.value}-dropdown`, {\n      [`${treeSelectPrefixCls.value}-dropdown-rtl`]: direction.value === 'rtl'\n    }, hashId.value));\n    const isMultiple = computed(() => !!(props.treeCheckable || props.multiple));\n    const mergedShowArrow = computed(() => props.showArrow !== undefined ? props.showArrow : props.loading || !isMultiple.value);\n    const treeSelectRef = ref();\n    expose({\n      focus() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n      },\n      blur() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).blur) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    });\n    const handleChange = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      emit('update:value', args[0]);\n      emit('change', ...args);\n      formItemContext.onFieldChange();\n    };\n    const handleTreeExpand = keys => {\n      emit('update:treeExpandedKeys', keys);\n      emit('treeExpand', keys);\n    };\n    const handleSearch = value => {\n      emit('update:searchValue', value);\n      emit('search', value);\n    };\n    const handleBlur = e => {\n      emit('blur', e);\n      formItemContext.onFieldBlur();\n    };\n    return () => {\n      var _a, _b, _c;\n      const {\n        notFoundContent = (_a = slots.notFoundContent) === null || _a === void 0 ? void 0 : _a.call(slots),\n        prefixCls: customizePrefixCls,\n        bordered,\n        listHeight,\n        listItemHeight,\n        multiple,\n        treeIcon,\n        treeLine,\n        showArrow,\n        switcherIcon = (_b = slots.switcherIcon) === null || _b === void 0 ? void 0 : _b.call(slots),\n        fieldNames = props.replaceFields,\n        id = formItemContext.id.value,\n        placeholder = (_c = slots.placeholder) === null || _c === void 0 ? void 0 : _c.call(slots)\n      } = props;\n      const {\n        isFormItemInput,\n        hasFeedback,\n        feedbackIcon\n      } = formItemInputContext;\n      // ===================== Icons =====================\n      const {\n        suffixIcon,\n        removeIcon,\n        clearIcon\n      } = getIcons(_extends(_extends({}, props), {\n        multiple: isMultiple.value,\n        showArrow: mergedShowArrow.value,\n        hasFeedback,\n        feedbackIcon,\n        prefixCls: prefixCls.value\n      }), slots);\n      // ===================== Empty =====================\n      let mergedNotFound;\n      if (notFoundContent !== undefined) {\n        mergedNotFound = notFoundContent;\n      } else {\n        mergedNotFound = renderEmpty('Select');\n      }\n      // ==================== Render =====================\n      const selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon', 'bordered', 'status', 'onUpdate:value', 'onUpdate:treeExpandedKeys', 'onUpdate:searchValue']);\n      const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls.value, {\n        [`${prefixCls.value}-lg`]: mergedSize.value === 'large',\n        [`${prefixCls.value}-sm`]: mergedSize.value === 'small',\n        [`${prefixCls.value}-rtl`]: direction.value === 'rtl',\n        [`${prefixCls.value}-borderless`]: !bordered,\n        [`${prefixCls.value}-in-form-item`]: isFormItemInput\n      }, getStatusClassNames(prefixCls.value, mergedStatus.value, hasFeedback), compactItemClassnames.value, attrs.class, hashId.value);\n      const otherProps = {};\n      if (props.treeData === undefined && slots.default) {\n        otherProps.children = flattenChildren(slots.default());\n      }\n      return wrapSelectSSR(wrapTreeSelectSSR(_createVNode(VcTreeSelect, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, attrs), selectProps), {}, {\n        \"disabled\": mergedDisabled.value,\n        \"virtual\": virtual.value,\n        \"dropdownMatchSelectWidth\": dropdownMatchSelectWidth.value,\n        \"id\": id,\n        \"fieldNames\": fieldNames,\n        \"ref\": treeSelectRef,\n        \"prefixCls\": prefixCls.value,\n        \"class\": mergedClassName,\n        \"listHeight\": listHeight,\n        \"listItemHeight\": listItemHeight,\n        \"treeLine\": !!treeLine,\n        \"inputIcon\": suffixIcon,\n        \"multiple\": multiple,\n        \"removeIcon\": removeIcon,\n        \"clearIcon\": clearIcon,\n        \"switcherIcon\": nodeProps => renderSwitcherIcon(treePrefixCls.value, switcherIcon, nodeProps, slots.leafIcon, treeLine),\n        \"showTreeIcon\": treeIcon,\n        \"notFoundContent\": mergedNotFound,\n        \"getPopupContainer\": getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.value,\n        \"treeMotion\": null,\n        \"dropdownClassName\": mergedDropdownClassName.value,\n        \"choiceTransitionName\": choiceTransitionName.value,\n        \"onChange\": handleChange,\n        \"onBlur\": handleBlur,\n        \"onSearch\": handleSearch,\n        \"onTreeExpand\": handleTreeExpand\n      }, otherProps), {}, {\n        \"transitionName\": transitionName.value,\n        \"customSlots\": _extends(_extends({}, slots), {\n          treeCheckable: () => _createVNode(\"span\", {\n            \"class\": `${prefixCls.value}-tree-checkbox-inner`\n          }, null)\n        }),\n        \"maxTagPlaceholder\": props.maxTagPlaceholder || slots.maxTagPlaceholder,\n        \"placement\": placement.value,\n        \"showArrow\": hasFeedback || showArrow,\n        \"placeholder\": placeholder\n      }), _extends(_extends({}, slots), {\n        treeCheckable: () => _createVNode(\"span\", {\n          \"class\": `${prefixCls.value}-tree-checkbox-inner`\n        }, null)\n      }))));\n    };\n  }\n});\n/* istanbul ignore next */\nexport const TreeSelectNode = TreeNode;\nexport default _extends(TreeSelect, {\n  TreeNode,\n  SHOW_ALL: SHOW_ALL,\n  SHOW_PARENT: SHOW_PARENT,\n  SHOW_CHILD: SHOW_CHILD,\n  install: app => {\n    app.component(TreeSelect.name, TreeSelect);\n    app.component(TreeSelectNode.displayName, TreeSelectNode);\n    return app;\n  }\n});","<template>\n\t<a-tree-select\n\t\t:value=\"selected\"\n\t\t@change=\"selected = $event as string | string[]\" \n\t\t:loading=\"loading\"\n\t\t:treeData=\"realTreeData\"\n\t\tv-bind=\"$attrs\"\n\t/>\n</template>\n\n<script setup lang=\"ts\">\nimport ATreeSelect from \"ant-design-vue/es/tree-select\";\nimport { computed, ref } from \"vue\";\nimport { TreeDataGetter } from \"../types\";\nimport { TreeSelectProps } from \"ant-design-vue\";\nimport { DefaultOptionType } from \"ant-design-vue/es/vc-tree-select/TreeSelect\";\n\ntype propType = {\n\tvalue: string | string[] | undefined;\n\ttreeData?: DefaultOptionType[] | TreeDataGetter;\n};\n\nconst props = defineProps<propType>();\nconst emit = defineEmits();\n\nconst realTreeData = ref<TreeSelectProps[\"treeData\"]>([]);\nconst selected = computed({\n\tget() {\n\t\treturn props.value;\n\t},\n\tset(value) {\n\t\temit(\"update:value\", value);\n\t},\n});\nconst loading = ref(false);\n\nconst getData = async () => {\n\tloading.value = true;\n\ttry {\n\t\tif (!props.treeData) {\n\t\t\tconsole.error(\"options must not be empty\");\n\t\t\treturn;\n\t\t}\n\t\tif (props.treeData instanceof Function) {\n\t\t\tconst optionsPromise = await props.treeData();\n\t\t\trealTreeData.value = optionsPromise || [];\n\t\t} else {\n\t\t\tif (props.treeData && !Array.isArray(props.treeData)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"options must be an array or a function that returns an array\"\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trealTreeData.value = props.treeData || [];\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n\tloading.value = false;\n\tselected.value = props.value;\n};\n\ngetData();\n\n</script>\n"],"names":["toArray","value","fillFieldNames","fieldNames","label","children","mergedValue","isCheckDisabled","node","getAllKeys","treeData","keys","dig","list","item","isNil","val","TreeSelectContextPropsKey","useProvideSelectContext","props","provide","useInjectSelectContext","inject","HIDDEN_STYLE","OptionList","defineComponent","_","_ref","slots","expose","baseProps","useBaseProps","legacyContext","useInjectLegacySelectContext","context","treeRef","ref","memoTreeData","useMemo","next","mergedCheckedKeys","computed","checkable","halfCheckedKeys","checkedKeys","watch","nextTick","_a","lowerSearchValue","filterTreeNode","treeNode","expandedKeys","shallowRef","searchExpandedKeys","toRaw","mergedExpandedKeys","onInternalExpand","onListMouseDown","event","onInternalSelect","_ref2","_b","activeKey","activeEntity","setActiveKey","key","_len","args","_key","which","KeyCode","selectable","prefixCls","multiple","searchValue","open","notFoundContent","listHeight","listItemHeight","virtual","dropdownMatchSelectWidth","treeExpandAction","treeDefaultExpandAll","treeIcon","showTreeIcon","switcherIcon","treeLine","loadData","treeLoadedKeys","treeMotion","onTreeLoad","_createVNode","treeProps","Tree","_objectSpread","_extends","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","formatStrategyValues","values","strategy","keyEntities","valueSet","entity","parent","TreeNode","__rest","s","e","t","p","i","isTreeSelectNode","convertChildrenToData","rootNodes","treeNodes","filterEmpty","_c","warning","k","v","camelize","isLeaf","disabled","disableCheckbox","newProps","slotsProps","title","rest","dataNode","parsedChildren","fillLegacyProps","cloneNode","fillAdditionalInfo","extra","triggerValue","checkedValues","showPosition","triggerNode","nodeList","generateMap","level","parentIncluded","option","index","pos","included","child","checkedNode","val1","val2","index1","index2","_ref3","parseSimpleTreeData","id","pId","rootPId","keyNodes","rootNodeList","clone","parentKey","useTreeData","simpleMode","mergedTreeData","simpleModeValue","useCache","cacheRef","mergedValues","valueLabels","valueLabelsCache","filledValues","mergedLabel","useDataEntities","valueEntities","watchEffect","fieldNamesValue","collection","convertDataToEntities","wrapper","useCheckedKeys","rawLabeledValues","rawHalfCheckedValues","treeConduction","maxLevel","levelEntities","newRawCheckedValues","newRawHalfCheckedValues","missingValues","conductCheck","useFilterTreeData","treeNodeFilterProp","fieldChildren","searchValueVal","treeNodeFilterPropValue","filterOptionFunc","upperStr","keepAll","res","len","match","childList","warningProps","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","treeSelectProps","omit","baseSelectPropsWithoutPrivate","PropTypes","isRawValue","TreeSelect$1","initDefaultProps","attrs","mergedId","useId","toRef","mergedCheckable","mergedLabelInValue","mergedMultiple","mergedFieldNames","mergedSearchValue","setSearchValue","useMergedState","search","onInternalSearch","searchText","splitRawValues","newRawValues","missingRawValues","existRawValues","filteredTreeData","getLabel","titleList","toLabeledValues","draftValues","convert2LabelValues","rawLabel","rawValue","rawHalfChecked","rawDisabled","internalValue","setInternalValue","rawMixedLabeledValues","rawHalfLabeledValues","fullCheckValues","halfCheckValues","rawValues","useMaxLevel","rawCheckedValues","displayValues","labeledValues","targetItem","rawDisplayValues","firstVal","cachedDisplayValues","triggerChange","source","eventValues","selected","returnRawValues","halfValues","returnLabeledValues","additionalInfo","returnValues","onOptionSelect","selectedKey","keyEntitiesValue","valueEntitiesValue","selectedValue","keyList","onInternalDropdownVisibleChange","legacyParam","onDisplayValuesChange","newValues","info","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","customSlots","toRefs","useProvideLegacySelectContext","toReactive","selectRef","arg","restProps","BaseSelect","genBaseStyle","token","componentCls","treePrefixCls","colorBgElevated","treeCls","genTreeStyle","mergeToken","getCheckboxStyle","useTreeSelectStyle","genComponentStyleHook","treeSelectToken","getTransitionName","rootPrefixCls","motion","transitionName","vcTreeSelectProps","stringType","booleanType","someType","objectType","functionType","TreeSelect","emit","devWarning","formItemContext","useInjectFormItemContext","formItemInputContext","FormItemInputContext","mergedStatus","getMergedStatus","renderEmpty","direction","contextSize","getPopupContainer","getPrefixCls","useConfigInject","compactSize","compactItemClassnames","useCompactItemContext","mergedSize","contextDisabled","useInjectDisabled","mergedDisabled","placement","getTransitionDirection","choiceTransitionName","treeSelectPrefixCls","wrapSelectSSR","hashId","useSelectStyle","wrapTreeSelectSSR","useStyle","mergedDropdownClassName","classNames","isMultiple","mergedShowArrow","treeSelectRef","handleChange","handleTreeExpand","handleSearch","handleBlur","customizePrefixCls","bordered","showArrow","placeholder","isFormItemInput","hasFeedback","feedbackIcon","suffixIcon","removeIcon","clearIcon","getIcons","mergedNotFound","selectProps","mergedClassName","getStatusClassNames","otherProps","flattenChildren","VcTreeSelect","nodeProps","renderSwitcherIcon","TreeSelectNode","ATreeSelect","app","__props","__emit","realTreeData","loading","optionsPromise","error"],"mappings":";;;;;;;;;;AAAO,SAASA,GAAQC,GAAO;AAC7B,SAAI,MAAM,QAAQA,CAAK,IACdA,IAEFA,MAAU,SAAY,CAACA,CAAK,IAAI,CAAA;AACzC;AACO,SAASC,GAAeC,GAAY;AACzC,QAAM;AAAA,IACJ,OAAAC;AAAA,IACA,OAAAH;AAAA,IACA,UAAAI;AAAA,EACJ,IAAMF,KAAc,CAAA,GACZG,IAAcL,KAAS;AAC7B,SAAO;AAAA,IACL,QAAQG,IAAQ,CAACA,CAAK,IAAI,CAAC,SAAS,OAAO;AAAA,IAC3C,OAAOE;AAAA,IACP,KAAKA;AAAA,IACL,UAAUD,KAAY;AAAA,EAC1B;AACA;AACO,SAASE,GAAgBC,GAAM;AACpC,SAAOA,EAAK,YAAYA,EAAK,mBAAmBA,EAAK,cAAc;AACrE;AAEO,SAASC,GAAWC,GAAUP,GAAY;AAC/C,QAAMQ,IAAO,CAAA;AACb,WAASC,EAAIC,GAAM;AACjB,IAAAA,EAAK,QAAQ,CAAAC,MAAQ;AACnB,MAAAH,EAAK,KAAKG,EAAKX,EAAW,KAAK,CAAC;AAChC,YAAME,IAAWS,EAAKX,EAAW,QAAQ;AACzC,MAAIE,KACFO,EAAIP,CAAQ;AAAA,IAEpB,CAAK;AAAA,EACF;AACD,SAAAO,EAAIF,CAAQ,GACLC;AACT;AACO,SAASI,GAAMC,GAAK;AACzB,SAAOA,KAAQ;AACjB;ACvCA,MAAMC,KAA4B,OAAO,2BAA2B;AAC7D,SAASC,GAAwBC,GAAO;AAC7C,SAAOC,GAAQH,IAA2BE,CAAK;AACjD;AACe,SAASE,KAAyB;AAC/C,SAAOC,GAAOL,IAA2B,CAAA,CAAE;AAC7C;ACIA,MAAMM,KAAe;AAAA,EACnB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AACV,GACAC,KAAeC,GAAgB;AAAA,EAC7B,cAAc;AAAA,IACZ,MAAM;AAAA,EACP;AAAA,EACD,MAAM;AAAA,EACN,cAAc;AAAA,EACd,MAAMC,GAAGC,GAAM;AACb,QAAI;AAAA,MACF,OAAAC;AAAA,MACA,QAAAC;AAAA,IACD,IAAGF;AACJ,UAAMG,IAAYC,MACZC,IAAgBC,MAChBC,IAAUb,MACVc,IAAUC,MACVC,IAAeC,GAAQ,MAAMJ,EAAQ,UAAU,CAAC,MAAMJ,EAAU,MAAM,MAAMI,EAAQ,QAAQ,GAAG,CAAAK,MAAQA,EAAK,CAAC,CAAC,GAC9GC,IAAoBC,EAAS,MAAM;AACvC,YAAM;AAAA,QACJ,WAAAC;AAAA,QACA,iBAAAC;AAAA,QACA,aAAAC;AAAA,MACD,IAAGZ;AACJ,aAAKU,IAGE;AAAA,QACL,SAASE;AAAA,QACT,aAAaD;AAAA,MACrB,IALe;AAAA,IAMf,CAAK;AACD,IAAAE,GAAM,MAAMf,EAAU,MAAM,MAAM;AAChC,MAAAgB,GAAS,MAAM;AACb,YAAIC;AACJ,QAAIjB,EAAU,QAAQ,CAACA,EAAU,YAAYE,EAAc,YAAY,YACpEe,IAAKZ,EAAQ,WAAW,QAAQY,MAAO,UAAkBA,EAAG,SAAS;AAAA,UACpE,KAAKf,EAAc,YAAY,CAAC;AAAA,QAC5C,CAAW;AAAA,MAEX,CAAO;AAAA,IACP,GAAO;AAAA,MACD,WAAW;AAAA,MACX,OAAO;AAAA,IACb,CAAK;AAED,UAAMgB,IAAmBP,EAAS,MAAM,OAAOX,EAAU,WAAW,EAAE,YAAW,CAAE,GAC7EmB,IAAiB,CAAAC,MAChBF,EAAiB,QAGf,OAAOE,EAASlB,EAAc,kBAAkB,CAAC,EAAE,YAAW,EAAG,SAASgB,EAAiB,KAAK,IAF9F,IAKLG,IAAeC,EAAWpB,EAAc,uBAAuB,GAC/DqB,IAAqBD,EAAW,IAAI;AAC1C,IAAAP,GAAM,MAAMf,EAAU,aAAa,MAAM;AACvC,MAAIA,EAAU,gBACZuB,EAAmB,QAAQ5C,GAAW6C,GAAMpB,EAAQ,QAAQ,GAAGoB,GAAMpB,EAAQ,UAAU,CAAC;AAAA,IAEhG,GAAO;AAAA,MACD,WAAW;AAAA,IACjB,CAAK;AACD,UAAMqB,IAAqBd,EAAS,MAC9BT,EAAc,mBACTA,EAAc,iBAAiB,UAEjCF,EAAU,cAAcuB,EAAmB,QAAQF,EAAa,KACxE,GACKK,IAAmB,CAAA7C,MAAQ;AAC/B,UAAIoC;AACJ,MAAAI,EAAa,QAAQxC,GACrB0C,EAAmB,QAAQ1C,IAC1BoC,IAAKf,EAAc,kBAAkB,QAAQe,MAAO,UAAkBA,EAAG,KAAKf,GAAerB,CAAI;AAAA,IACxG,GAEU8C,IAAkB,CAAAC,MAAS;AAC/B,MAAAA,EAAM,eAAc;AAAA,IAC1B,GACUC,IAAmB,CAACjC,GAAGkC,MAAU;AACrC,UAAI;AAAA,QACF,MAAApD;AAAA,MACD,IAAGoD;AACJ,UAAIb,GAAIc;AACR,YAAM;AAAA,QACJ,WAAAnB;AAAA,QACA,aAAAE;AAAA,MACD,IAAGZ;AACJ,MAAIU,KAAanC,GAAgBC,CAAI,OAGpCuC,IAAKb,EAAQ,cAAc,QAAQa,MAAO,UAAkBA,EAAG,KAAKb,GAAS1B,EAAK,KAAK;AAAA,QACtF,UAAU,CAACoC,EAAY,SAASpC,EAAK,GAAG;AAAA,MAChD,CAAO,GACIsB,EAAU,aACZ+B,IAAK/B,EAAU,gBAAgB,QAAQ+B,MAAO,UAAkBA,EAAG,KAAK/B,GAAW,EAAK;AAAA,IAEjG,GAEUgC,IAAY1B,GAAI,IAAI,GACpB2B,IAAetB,EAAS,MAAMT,EAAc,YAAY8B,EAAU,KAAK,CAAC,GACxEE,IAAe,CAAAC,MAAO;AAC1B,MAAAH,EAAU,QAAQG;AAAA,IACxB;AACI,WAAApC,EAAO;AAAA,MACL,UAAU,WAAY;AAEpB,iBADIkB,GAAIc,GACCK,IAAO,UAAU,QAAQC,IAAO,IAAI,MAAMD,CAAI,GAAGE,IAAO,GAAGA,IAAOF,GAAME;AAC/E,UAAAD,EAAKC,CAAI,IAAI,UAAUA,CAAI;AAE7B,gBAAQP,KAAMd,IAAKZ,EAAQ,WAAW,QAAQY,MAAO,SAAS,SAASA,EAAG,cAAc,QAAQc,MAAO,SAAS,SAASA,EAAG,KAAKd,GAAI,GAAGoB,CAAI;AAAA,MAC7I;AAAA,MACD,WAAW,CAAAT,MAAS;AAClB,YAAIX;AACJ,cAAM;AAAA,UACJ,OAAAsB;AAAA,QACD,IAAGX;AACJ,gBAAQW,GAAK;AAAA,UAEX,KAAKC,GAAQ;AAAA,UACb,KAAKA,GAAQ;AAAA,UACb,KAAKA,GAAQ;AAAA,UACb,KAAKA,GAAQ;AACX,aAACvB,IAAKZ,EAAQ,WAAW,QAAQY,MAAO,UAAkBA,EAAG,UAAUW,CAAK;AAC5E;AAAA,UAEF,KAAKY,GAAQ,OACX;AACE,gBAAIP,EAAa,OAAO;AACtB,oBAAM;AAAA,gBACJ,YAAAQ;AAAA,gBACA,OAAAtE;AAAA,cACD,IAAG8D,EAAa,MAAM,QAAQ;AAC/B,cAAIQ,MAAe,MACjBZ,EAAiB,MAAM;AAAA,gBACrB,MAAM;AAAA,kBACJ,KAAKG,EAAU;AAAA,gBAChB;AAAA,gBACD,UAAU,CAAC9B,EAAc,YAAY,SAAS/B,CAAK;AAAA,cACvE,CAAmB;AAAA,YAEJ;AACD;AAAA,UACD;AAAA,UAEH,KAAKqE,GAAQ;AAET,YAAAxC,EAAU,WAAW,EAAK;AAAA,QAE/B;AAAA,MACF;AAAA,MACD,SAAS,MAAM;AAAA,MAAE;AAAA,IACvB,CAAK,GACM,MAAM;AACX,UAAIiB;AACJ,YAAM;AAAA,QACJ,WAAAyB;AAAA,QACA,UAAAC;AAAA,QACA,aAAAC;AAAA,QACA,MAAAC;AAAA,QACA,iBAAAC,KAAmB7B,IAAKnB,EAAM,qBAAqB,QAAQmB,MAAO,SAAS,SAASA,EAAG,KAAKnB,CAAK;AAAA,MAClG,IAAGE,GACE;AAAA,QACJ,YAAA+C;AAAA,QACA,gBAAAC;AAAA,QACA,SAAAC;AAAA,QACA,0BAAAC;AAAA,QACA,kBAAAC;AAAA,MACD,IAAG/C,GACE;AAAA,QACJ,WAAAQ;AAAA,QACA,sBAAAwC;AAAA,QACA,UAAAC;AAAA,QACA,cAAAC;AAAA,QACA,cAAAC;AAAA,QACA,UAAAC;AAAA,QACA,UAAAC;AAAA,QACA,gBAAAC;AAAA,QACA,YAAAC;AAAA,QACA,YAAAC;AAAA,QACA,aAAA9C;AAAA,MACD,IAAGZ;AAEJ,UAAIK,EAAa,MAAM,WAAW;AAChC,eAAOsD,EAAa,OAAO;AAAA,UACzB,MAAQ;AAAA,UACR,OAAS,GAAGnB,CAAS;AAAA,UACrB,aAAef;AAAA,QACzB,GAAW,CAACmB,CAAe,CAAC;AAEtB,YAAMgB,IAAY;AAAA,QAChB,YAAY1D,EAAQ;AAAA,MAC5B;AACM,aAAIsD,OACFI,EAAU,aAAaJ,KAErBjC,EAAmB,UACrBqC,EAAU,eAAerC,EAAmB,QAEvCoC,EAAa,OAAO;AAAA,QACzB,aAAelC;AAAA,MAChB,GAAE,CAACM,EAAa,SAASY,KAAQgB,EAAa,QAAQ;AAAA,QACrD,OAASpE;AAAA,QACT,aAAa;AAAA,MACrB,GAAS,CAACwC,EAAa,MAAM,KAAK,KAAK,CAAC,GAAG4B,EAAaE,IAAMC,EAAcA,EAAc;AAAA,QAClF,KAAO3D;AAAA,QACP,WAAa;AAAA,QACb,WAAa,GAAGqC,CAAS;AAAA,QACzB,UAAYnC,EAAa;AAAA,QACzB,QAAUwC;AAAA,QACV,YAAcC;AAAA,QACd,SAAWC,OAAY,MAASC,MAA6B;AAAA,QAC7D,UAAYP;AAAA,QACZ,MAAQU;AAAA,QACR,UAAYC;AAAA,QACZ,cAAgBC;AAAA,QAChB,UAAYC;AAAA,QACZ,UAAYZ,IAAc,OAAOa;AAAA,QACjC,QAAUE;AAAA,QACV,WAAa3B,EAAU;AAAA,QACvB,WAAapB;AAAA,QACb,eAAiB;AAAA,QACjB,aAAeF,EAAkB;AAAA,QACjC,cAAiBE,KAA0B,CAAE,IAAhBE;AAAA,QAC7B,kBAAoBsC;AAAA,MAC5B,GAASU,CAAS,GAAG,IAAI;AAAA,QACjB,gBAAkB5B;AAAA,QAClB,UAAYL;AAAA,QACZ,SAAWA;AAAA,QACX,UAAYH;AAAA,QACZ,QAAUkC;AAAA,QACV,gBAAkBzC;AAAA,QAClB,cAAgBgC;AAAA,MACjB,CAAA,GAAGc,EAASA,EAAS,CAAE,GAAEnE,CAAK,GAAG;AAAA,QAChC,WAAWI,EAAc,YAAY;AAAA,MAC7C,CAAO,CAAC,CAAC,CAAC;AAAA,IACV;AAAA,EACG;AACH,CAAC,GChQYgE,KAAW,YACXC,KAAc,eACdC,KAAa;AACnB,SAASC,GAAqBC,GAAQC,GAAUC,GAAanG,GAAY;AAC9E,QAAMoG,IAAW,IAAI,IAAIH,CAAM;AAC/B,SAAIC,MAAaH,KACRE,EAAO,OAAO,CAAAnC,MAAO;AAC1B,UAAMuC,IAASF,EAAYrC,CAAG;AAC9B,WAAI,EAAAuC,KAAUA,EAAO,YAAYA,EAAO,SAAS,KAAK,CAAA7E,MAAQ;AAC5D,UAAI;AAAA,QACF,MAAAnB;AAAA,MACD,IAAGmB;AACJ,aAAO4E,EAAS,IAAI/F,EAAKL,EAAW,KAAK,CAAC;AAAA,IAC3C,CAAA,KAAKqG,EAAO,SAAS,MAAM,CAAA5C,MAAS;AACnC,UAAI;AAAA,QACF,MAAApD;AAAA,MACD,IAAGoD;AACJ,aAAOrD,GAAgBC,CAAI,KAAK+F,EAAS,IAAI/F,EAAKL,EAAW,KAAK,CAAC;AAAA,IAC3E,CAAO;AAAA,EAIP,CAAK,IAECkG,MAAaJ,KACRG,EAAO,OAAO,CAAAnC,MAAO;AAC1B,UAAMuC,IAASF,EAAYrC,CAAG,GACxBwC,IAASD,IAASA,EAAO,SAAS;AACxC,WAAI,EAAAC,KAAU,CAAClG,GAAgBkG,EAAO,IAAI,KAAKF,EAAS,IAAIE,EAAO,GAAG;AAAA,EAI5E,CAAK,IAEIL;AACT;AClCA,MAAMM,KAAW,MAAM;AACvBA,GAAS,eAAe;AACxBA,GAAS,cAAc;AACvBA,GAAS,mBAAmB;ACH5B,IAAIC,KAAgC,SAAUC,GAAGC,GAAG;AAClD,MAAIC,IAAI,CAAA;AACR,WAASC,KAAKH;AAAG,IAAI,OAAO,UAAU,eAAe,KAAKA,GAAGG,CAAC,KAAKF,EAAE,QAAQE,CAAC,IAAI,MAAGD,EAAEC,CAAC,IAAIH,EAAEG,CAAC;AAC/F,MAAIH,KAAK,QAAQ,OAAO,OAAO,yBAA0B;AAAY,aAASI,IAAI,GAAGD,IAAI,OAAO,sBAAsBH,CAAC,GAAGI,IAAID,EAAE,QAAQC;AACtI,MAAIH,EAAE,QAAQE,EAAEC,CAAC,CAAC,IAAI,KAAK,OAAO,UAAU,qBAAqB,KAAKJ,GAAGG,EAAEC,CAAC,CAAC,MAAGF,EAAEC,EAAEC,CAAC,CAAC,IAAIJ,EAAEG,EAAEC,CAAC,CAAC;AAElG,SAAOF;AACT;AAIA,SAASG,GAAiBzG,GAAM;AAC9B,SAAOA,KAAQA,EAAK,QAAQA,EAAK,KAAK;AACxC;AACO,SAAS0G,GAAsBC,GAAW;AAC/C,WAASvG,IAAM;AACb,QAAIwG,IAAY,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI,CAAA;AACpF,WAAOC,GAAYD,CAAS,EAAE,IAAI,CAAAlE,MAAY;AAC5C,UAAIH,GAAIc,GAAIyD;AAEZ,UAAI,CAACL,GAAiB/D,CAAQ;AAC5B,eAAAqE,EAAQ,CAACrE,GAAU,uEAAuE,GACnF;AAET,YAAMtB,IAAQsB,EAAS,YAAY,IAC7Be,IAAMf,EAAS,KACf/B,IAAQ,CAAA;AACd,iBAAW,CAACqG,GAAGC,CAAC,KAAK,OAAO,QAAQvE,EAAS,KAAK;AAChD,QAAA/B,EAAMuG,GAASF,CAAC,CAAC,IAAIC;AAEvB,YAAM;AAAA,QACJ,QAAAE;AAAA,QACA,WAAAjF;AAAA,QACA,YAAA6B;AAAA,QACA,UAAAqD;AAAA,QACA,iBAAAC;AAAA,MACD,IAAG1G,GAEE2G,IAAW;AAAA,QACf,QAAQH,KAAUA,MAAW,MAAM;AAAA,QACnC,WAAWjF,KAAaA,MAAc,MAAM;AAAA,QAC5C,YAAY6B,KAAcA,MAAe,MAAM;AAAA,QAC/C,UAAUqD,KAAYA,MAAa,MAAM;AAAA,QACzC,iBAAiBC,KAAmBA,MAAoB,MAAM;AAAA,MACtE,GACYE,IAAahC,EAASA,EAAS,CAAE,GAAE5E,CAAK,GAAG2G,CAAQ,GACnD;AAAA,QACF,OAAAE,KAASjF,IAAKnB,EAAM,WAAW,QAAQmB,MAAO,SAAS,SAASA,EAAG,KAAKnB,GAAOmG,CAAU;AAAA,QACzF,cAAA1C,KAAgBxB,IAAKjC,EAAM,kBAAkB,QAAQiC,MAAO,SAAS,SAASA,EAAG,KAAKjC,GAAOmG,CAAU;AAAA,MACjH,IAAY5G,GACJ8G,IAAOtB,GAAOxF,GAAO,CAAC,SAAS,cAAc,CAAC,GAC1Cd,KAAYiH,IAAK1F,EAAM,aAAa,QAAQ0F,MAAO,SAAS,SAASA,EAAG,KAAK1F,CAAK,GAClFsG,IAAWnC,EAASA,EAASA,EAAS,CAAA,GAAIkC,CAAI,GAAG;AAAA,QACrD,OAAAD;AAAA,QACA,cAAA3C;AAAA,QACA,KAAApB;AAAA,QACA,QAAA0D;AAAA,MACR,CAAO,GAAGG,CAAQ,GACNK,IAAiBvH,EAAIP,CAAQ;AACnC,aAAI8H,EAAe,WACjBD,EAAS,WAAWC,IAEfD;AAAA,IACb,CAAK;AAAA,EACF;AACD,SAAOtH,EAAIuG,CAAS;AACtB;AACO,SAASiB,GAAgBF,GAAU;AAExC,MAAI,CAACA;AACH,WAAOA;AAET,QAAMG,IAAYtC,EAAS,CAAE,GAAEmC,CAAQ;AACvC,SAAM,WAAWG,KACf,OAAO,eAAeA,GAAW,SAAS;AAAA,IACxC,MAAM;AACJ,aAAAd,EAAQ,IAAO,sHAAsH,GAC9Hc;AAAA,IACR;AAAA,EACP,CAAK,GAEIA;AACT;AACO,SAASC,GAAmBC,GAAOC,GAAcC,GAAe/H,GAAUgI,GAAcvI,GAAY;AACzG,MAAIwI,IAAc,MACdC,IAAW;AACf,WAASC,IAAc;AACrB,aAASjI,EAAIC,GAAM;AACjB,UAAIiI,IAAQ,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI,KAC5EC,IAAiB,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AACzF,aAAOlI,EAAK,IAAI,CAACmI,GAAQC,MAAU;AACjC,cAAMC,IAAM,GAAGJ,CAAK,IAAIG,CAAK,IACvBhJ,IAAQ+I,EAAO7I,EAAW,KAAK,GAC/BgJ,IAAWV,EAAc,SAASxI,CAAK,GACvCI,IAAWO,EAAIoI,EAAO7I,EAAW,QAAQ,KAAK,CAAE,GAAE+I,GAAKC,CAAQ,GAC/D3I,IAAOmF,EAAae,IAAUsC,GAAQ;AAAA,UAC1C,SAAS,MAAM,CAAC3I,EAAS,IAAI,CAAA+I,MAASA,EAAM,IAAI,CAAC;AAAA,QAC3D,CAAS;AAKD,YAHIZ,MAAiBvI,MACnB0I,IAAcnI,IAEZ2I,GAAU;AACZ,gBAAME,IAAc;AAAA,YAClB,KAAAH;AAAA,YACA,MAAA1I;AAAA,YACA,UAAAH;AAAA,UACZ;AACU,iBAAK0I,KACHH,EAAS,KAAKS,CAAW,GAEpBA;AAAA,QACR;AACD,eAAO;AAAA,MACR,CAAA,EAAE,OAAO,CAAA7I,MAAQA,CAAI;AAAA,IACvB;AACD,IAAKoI,MACHA,IAAW,CAAA,GACXhI,EAAIF,CAAQ,GAEZkI,EAAS,KAAK,CAACjH,GAAMiC,MAAU;AAC7B,UAAI;AAAA,QACF,MAAM;AAAA,UACJ,OAAO;AAAA,YACL,OAAO0F;AAAA,UACR;AAAA,QACF;AAAA,MACF,IAAG3H,GACA;AAAA,QACF,MAAM;AAAA,UACJ,OAAO;AAAA,YACL,OAAO4H;AAAA,UACR;AAAA,QACF;AAAA,MACF,IAAG3F;AACJ,YAAM4F,IAASf,EAAc,QAAQa,CAAI,GACnCG,IAAShB,EAAc,QAAQc,CAAI;AACzC,aAAOC,IAASC;AAAA,IACxB,CAAO;AAAA,EAEJ;AACD,SAAO,eAAelB,GAAO,eAAe;AAAA,IAC1C,MAAM;AACJ,aAAAhB,EAAQ,IAAO,yEAAyE,GACxFsB,KACOF;AAAA,IACR;AAAA,EACL,CAAG,GACD,OAAO,eAAeJ,GAAO,mBAAmB;AAAA,IAC9C,MAAM;AAGJ,aAFAhB,EAAQ,IAAO,6EAA6E,GAC5FsB,KACIH,IACKE,IAEFA,EAAS,IAAI,CAAAc,MAAS;AAC3B,YAAI;AAAA,UACF,MAAAlJ;AAAA,QACD,IAAGkJ;AACJ,eAAOlJ;AAAA,MACf,CAAO;AAAA,IACF;AAAA,EACL,CAAG;AACH;AClKA,SAASmJ,GAAoBjJ,GAAUiB,GAAM;AAC3C,MAAI;AAAA,IACF,IAAAiI;AAAA,IACA,KAAAC;AAAA,IACA,SAAAC;AAAA,EACD,IAAGnI;AACJ,QAAMoI,IAAW,CAAA,GACXC,IAAe,CAAA;AAUrB,SARiBtJ,EAAS,IAAI,CAAAF,MAAQ;AACpC,UAAMyJ,IAAQlE,EAAS,CAAE,GAAEvF,CAAI,GACzByD,IAAMgG,EAAML,CAAE;AACpB,WAAAG,EAAS9F,CAAG,IAAIgG,GAChBA,EAAM,MAAMA,EAAM,OAAOhG,GAClBgG;AAAA,EACX,CAAG,EAEQ,QAAQ,CAAAzJ,MAAQ;AACvB,UAAM0J,IAAY1J,EAAKqJ,CAAG,GACpBpD,IAASsD,EAASG,CAAS;AAEjC,IAAIzD,MACFA,EAAO,WAAWA,EAAO,YAAY,CAAA,GACrCA,EAAO,SAAS,KAAKjG,CAAI,KAGvB0J,MAAcJ,KAAW,CAACrD,KAAUqD,MAAY,SAClDE,EAAa,KAAKxJ,CAAI;AAAA,EAE5B,CAAG,GACMwJ;AACT;AAKe,SAASG,GAAYzJ,GAAUL,GAAU+J,GAAY;AAClE,QAAMC,IAAiBjH;AACvB,SAAAP,GAAM,CAACuH,GAAY1J,GAAUL,CAAQ,GAAG,MAAM;AAC5C,UAAMiK,IAAkBF,EAAW;AACnC,IAAI1J,EAAS,QACX2J,EAAe,QAAQD,EAAW,QAAQT,GAAoBrG,GAAM5C,EAAS,KAAK,GAAGqF,EAAS;AAAA,MAC5F,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,SAAS;AAAA,IACV,GAAEuE,MAAoB,KAAOA,IAAkB,EAAE,CAAC,IAAIhH,GAAM5C,EAAS,KAAK,EAAE,UAE7E2J,EAAe,QAAQnD,GAAsB5D,GAAMjD,EAAS,KAAK,CAAC;AAAA,EAExE,GAAK;AAAA,IACD,WAAW;AAAA,IACX,MAAM;AAAA,EACV,CAAG,GACMgK;AACT;ACnDA,MAAeE,KAAC,CAAAnE,MAAU;AACxB,QAAMoE,IAAWpH,EAAW;AAAA,IAC1B,aAAa,oBAAI,IAAK;AAAA,EAC1B,CAAG,GACKqH,IAAerH;AACrB,SAAAP,GAAMuD,GAAQ,MAAM;AAClB,IAAAqE,EAAa,QAAQnH,GAAM8C,EAAO,KAAK;AAAA,EAC3C,GAAK;AAAA,IACD,WAAW;AAAA,EACf,CAAG,GAqBM,CApBiB3D,EAAS,MAAM;AACrC,UAAM;AAAA,MACJ,aAAAiI;AAAA,IACN,IAAQF,EAAS,OACPG,IAAmB,oBAAI,OACvBC,IAAeH,EAAa,MAAM,IAAI,CAAA3J,MAAQ;AAClD,UAAIiC;AACJ,YAAM;AAAA,QACJ,OAAA9C;AAAA,MACD,IAAGa,GACE+J,KAAe9H,IAAKjC,EAAK,WAAW,QAAQiC,MAAO,SAASA,IAAK2H,EAAY,IAAIzK,CAAK;AAE5F,aAAA0K,EAAiB,IAAI1K,GAAO4K,CAAW,GAChC9E,EAASA,EAAS,CAAE,GAAEjF,CAAI,GAAG;AAAA,QAClC,OAAO+J;AAAA,MACf,CAAO;AAAA,IACP,CAAK;AACD,WAAAL,EAAS,MAAM,cAAcG,GACtBC;AAAA,EACX,CAAG,CACsB;AACzB,GChCAE,KAAgB,CAACpK,GAAUP,MAAe;AACxC,QAAM4K,IAAgB3H,EAAW,oBAAI,IAAK,CAAA,GACpCkD,IAAclD,EAAW,CAAA,CAAE;AACjC,SAAA4H,GAAY,MAAM;AAChB,UAAMC,IAAkB9K,EAAW,OAC7B+K,IAAaC,GAAsBzK,EAAS,OAAO;AAAA,MACvD,YAAYuK;AAAA,MACZ,aAAa,CAAAG,MAAWrF,EAASA,EAAS,CAAE,GAAEqF,CAAO,GAAG;AAAA,QACtD,eAAe,oBAAI,IAAK;AAAA,MAChC,CAAO;AAAA,MACD,eAAe,CAAC5E,GAAQ4E,MAAY;AAClC,cAAMpK,IAAMwF,EAAO,KAAKyE,EAAgB,KAAK;AAE7C,YAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,gBAAMhH,IAAMuC,EAAO,KAAK;AACxB,UAAAe,EAAQ,CAACxG,GAAMC,CAAG,GAAG,2CAA2C,GAChEuG,EAAQ,CAAC6D,EAAQ,cAAc,IAAIpK,CAAG,GAAG,qCAAqCA,CAAG,EAAE,GACnFuG,EAAQ,CAACtD,KAAO,OAAOA,CAAG,MAAM,OAAOjD,CAAG,GAAG,2FAA2FiD,CAAG,YAAYjD,CAAG,GAAG;AAAA,QAC9J;AACD,QAAAoK,EAAQ,cAAc,IAAIpK,GAAKwF,CAAM;AAAA,MACtC;AAAA,IACP,CAAK;AACD,IAAAuE,EAAc,QAAQG,EAAW,eACjC5E,EAAY,QAAQ4E,EAAW;AAAA,EACnC,CAAG,GACM;AAAA,IACL,eAAAH;AAAA,IACA,aAAAzE;AAAA,EACJ;AACA,GChCA+E,KAAgB,CAACC,GAAkBC,GAAsBC,GAAgBlF,GAAamF,GAAUC,MAAkB;AAChH,QAAMC,IAAsBvI,EAAW,CAAA,CAAE,GACnCwI,IAA0BxI,EAAW,CAAA,CAAE;AAC7C,SAAA4H,GAAY,MAAM;AAChB,QAAIpI,IAAc0I,EAAiB,MAAM,IAAI,CAAA3J,MAAQ;AACnD,UAAI;AAAA,QACF,OAAA1B;AAAA,MACD,IAAG0B;AACJ,aAAO1B;AAAA,IACb,CAAK,GACG0C,IAAkB4I,EAAqB,MAAM,IAAI,CAAA3H,MAAS;AAC5D,UAAI;AAAA,QACF,OAAA3D;AAAA,MACD,IAAG2D;AACJ,aAAO3D;AAAA,IACb,CAAK;AACD,UAAM4L,IAAgBjJ,EAAY,OAAO,CAAAqB,MAAO,CAACqC,EAAY,MAAMrC,CAAG,CAAC;AACvE,IAAIuH,EAAe,UAChB;AAAA,MACC,aAAA5I;AAAA,MACA,iBAAAD;AAAA,IACR,IAAUmJ,GAAalJ,GAAa,IAAM0D,EAAY,OAAOmF,EAAS,OAAOC,EAAc,KAAK,IAE5FC,EAAoB,QAAQ,MAAM,KAAK,oBAAI,IAAI,CAAC,GAAGE,GAAe,GAAGjJ,CAAW,CAAC,CAAC,GAClFgJ,EAAwB,QAAQjJ;AAAA,EACpC,CAAG,GACM,CAACgJ,GAAqBC,CAAuB;AACtD,GC1BAG,KAAgB,CAACrL,GAAUgE,GAAa/C,MAAS;AAC/C,MAAI;AAAA,IACF,oBAAAqK;AAAA,IACA,gBAAA/I;AAAA,IACA,YAAA9C;AAAA,EACD,IAAGwB;AACJ,SAAOc,EAAS,MAAM;AACpB,UAAM;AAAA,MACJ,UAAUwJ;AAAA,IAChB,IAAQ9L,EAAW,OACT+L,IAAiBxH,EAAY,OAC7ByH,IAA0BH,KAAuB,OAAwC,SAASA,EAAmB;AAC3H,QAAI,CAACE,KAAkBjJ,EAAe,UAAU;AAC9C,aAAOvC,EAAS;AAElB,QAAI0L;AACJ,QAAI,OAAOnJ,EAAe,SAAU;AAClC,MAAAmJ,IAAmBnJ,EAAe;AAAA,SAC7B;AACL,YAAMoJ,IAAWH,EAAe;AAChC,MAAAE,IAAmB,CAAC1K,GAAGwG,MAAa;AAClC,cAAMjI,IAAQiI,EAASiE,CAAuB;AAC9C,eAAO,OAAOlM,CAAK,EAAE,YAAW,EAAG,SAASoM,CAAQ;AAAA,MAC5D;AAAA,IACK;AACD,aAASzL,EAAIC,GAAM;AACjB,UAAIyL,IAAU,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAClF,YAAMC,IAAM,CAAA;AACZ,eAAStD,IAAQ,GAAGuD,IAAM3L,EAAK,QAAQoI,IAAQuD,GAAKvD,KAAS;AAC3D,cAAMf,IAAWrH,EAAKoI,CAAK,GACrB5I,IAAW6H,EAAS+D,CAAa,GACjCQ,IAAQH,KAAWF,EAAiBF,GAAgB9D,GAAgBF,CAAQ,CAAC,GAC7EwE,IAAY9L,EAAIP,KAAY,CAAE,GAAEoM,CAAK;AAC3C,SAAIA,KAASC,EAAU,WACrBH,EAAI,KAAKxG,EAASA,EAAS,CAAE,GAAEmC,CAAQ,GAAG;AAAA,UACxC,CAAC+D,CAAa,GAAGS;AAAA,QAClB,CAAA,CAAC;AAAA,MAEL;AACD,aAAOH;AAAA,IACR;AACD,WAAO3L,EAAIF,EAAS,KAAK;AAAA,EAC7B,CAAG;AACH;AC5CA,SAASiM,GAAaxL,GAAO;AAC3B,QAAM;AAAA,IACJ,mBAAAyL;AAAA,IACA,mBAAAC;AAAA,IACA,eAAAC;AAAA,IACA,cAAAC;AAAA,IACA,OAAA9M;AAAA,IACA,UAAAwE;AAAA,EACD,IAAGtD;AACJ,EAAAoG,EAAQ,CAACqF,GAAmB,wEAAwE,GAChGC,KAAqBE,MAAiB,MACxCxF,EAAQ,IAAO,8DAA8D,IAE3EwF,KAAgBF,MAClBtF,EAAQvH,GAAQC,CAAK,EAAE,MAAM,CAAAe,MAAOA,KAAO,OAAOA,KAAQ,YAAY,WAAWA,CAAG,GAAG,iKAAiK,GAEtP6L,KAAqBpI,KAAYqI,IACnCvF,EAAQ,CAACtH,KAAS,MAAM,QAAQA,CAAK,GAAG,wEAAwE,IAEhHsH,EAAQ,CAAC,MAAM,QAAQtH,CAAK,GAAG,+DAA+D;AAElG;ACIO,SAAS+M,KAAkB;AAChC,SAAOjH,EAASA,EAAS,IAAIkH,GAAKC,MAAiC,CAAC,MAAM,CAAC,CAAC,GAAG;AAAA,IAC7E,WAAW;AAAA,IACX,IAAI;AAAA,IACJ,OAAO;AAAA,MACL,MAAM,CAAC,QAAQ,QAAQ,QAAQ,KAAK;AAAA,IACrC;AAAA,IACD,cAAc;AAAA,MACZ,MAAM,CAAC,QAAQ,QAAQ,QAAQ,KAAK;AAAA,IACrC;AAAA,IACD,UAAU;AAAA,MACR,MAAM;AAAA,IACP;AAAA,IACD,aAAa;AAAA;AAAA,IAEb,YAAY;AAAA,IACZ,UAAU;AAAA,MACR,MAAM;AAAA,IACP;AAAA,IACD,sBAAsB;AAAA,MACpB,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,gBAAgB;AAAA,MACd,MAAM,CAAC,SAAS,QAAQ;AAAA,MACxB,SAAS;AAAA,IACV;AAAA,IACD,oBAAoB;AAAA;AAAA,IAEpB,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,qBAAqB;AAAA,MACnB,MAAM;AAAA,IACP;AAAA,IACD,mBAAmB;AAAA,IACnB,YAAY;AAAA,MACV,MAAM;AAAA,IACP;AAAA;AAAA,IAED,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,eAAe;AAAA,MACb,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,mBAAmB;AAAA,MACjB,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA;AAAA,IAED,UAAU;AAAA,MACR,MAAM;AAAA,IACP;AAAA,IACD,oBAAoB;AAAA,MAClB,MAAM,CAAC,SAAS,MAAM;AAAA,MACtB,SAAS;AAAA,IACV;AAAA,IACD,UAAU;AAAA,MACR,MAAM;AAAA,IACP;AAAA,IACD,gBAAgB;AAAA,MACd,MAAM;AAAA,IACP;AAAA,IACD,YAAY;AAAA,MACV,MAAM;AAAA,IACP;AAAA;AAAA,IAED,sBAAsB;AAAA,MACpB,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,kBAAkB;AAAA,MAChB,MAAM;AAAA,IACP;AAAA,IACD,yBAAyB;AAAA,MACvB,MAAM;AAAA,IACP;AAAA,IACD,cAAc;AAAA,MACZ,MAAM;AAAA,IACP;AAAA;AAAA,IAED,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,yBAAyB;AAAA,MACvB,MAAM;AAAA,IACP;AAAA;AAAA,IAED,UAAU;AAAA,MACR,MAAM,CAAC,SAAS,MAAM;AAAA,MACtB,SAAS;AAAA,IACV;AAAA,IACD,UAAUC,GAAU;AAAA,IACpB,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,cAAcA,GAAU;AAAA,IACxB,YAAYA,GAAU;AAAA,IACtB,UAAU;AAAA,IACV,kBAAkB;AAAA,IAClB,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,aAAaA,GAAU;AAAA,IACvB,mBAAmB;AAAA,MACjB,MAAM;AAAA,IACP;AAAA,IACD,oBAAoBA,GAAU;AAAA,IAC9B,aAAa;AAAA,EACjB,CAAG;AACH;AACA,SAASC,GAAWnN,GAAO;AACzB,SAAO,CAACA,KAAS,OAAOA,KAAU;AACpC;AACA,MAAAoN,KAAe5L,GAAgB;AAAA,EAC7B,cAAc;AAAA,IACZ,MAAM;AAAA,EACP;AAAA,EACD,MAAM;AAAA,EACN,cAAc;AAAA,EACd,OAAO6L,GAAiBN,MAAmB;AAAA,IACzC,oBAAoB;AAAA,IACpB,sBAAsB;AAAA,IACtB,qBAAqB9G;AAAA,IACrB,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,WAAW;AAAA,EACf,CAAG;AAAA,EACD,MAAM/E,GAAOQ,GAAM;AACjB,QAAI;AAAA,MACF,OAAA4L;AAAA,MACA,QAAA1L;AAAA,MACA,OAAAD;AAAA,IACD,IAAGD;AACJ,UAAM6L,IAAWC,GAAMC,GAAMvM,GAAO,IAAI,CAAC,GACnCqK,IAAiB/I,EAAS,MAAMtB,EAAM,iBAAiB,CAACA,EAAM,iBAAiB,GAC/EwM,IAAkBlL,EAAS,MAAMtB,EAAM,iBAAiBA,EAAM,iBAAiB,GAC/EyM,IAAqBnL,EAAS,MAAMtB,EAAM,qBAAqBA,EAAM,YAAY,GACjF0M,IAAiBpL,EAAS,MAAMkL,EAAgB,SAASxM,EAAM,QAAQ;AAE7E,IAAI,QAAQ,IAAI,aAAa,gBAC3B6J,GAAY,MAAM;AAChB,MAAA2B,GAAaxL,CAAK;AAAA,IAC1B,CAAO;AAGH,UAAM2M,IAAmBrL,EAAS,MAAMvC,GAAeiB,EAAM,UAAU,CAAC,GAElE,CAAC4M,GAAmBC,CAAc,IAAIC,GAAe,IAAI;AAAA,MAC7D,OAAOxL,EAAS,MAAMtB,EAAM,gBAAgB,SAAYA,EAAM,cAAcA,EAAM,UAAU;AAAA,MAC5F,WAAW,CAAA+M,MAAUA,KAAU;AAAA,IACrC,CAAK,GACKC,IAAmB,CAAAC,MAAc;AACrC,UAAIrL;AACJ,MAAAiL,EAAeI,CAAU,IACxBrL,IAAK5B,EAAM,cAAc,QAAQ4B,MAAO,UAAkBA,EAAG,KAAK5B,GAAOiN,CAAU;AAAA,IAC1F,GAKU/D,IAAiBF,GAAYuD,GAAMvM,GAAO,UAAU,GAAGuM,GAAMvM,GAAO,UAAU,GAAGuM,GAAMvM,GAAO,oBAAoB,CAAC,GACnH;AAAA,MACJ,aAAAmF;AAAA,MACA,eAAAyE;AAAA,IACN,IAAQD,GAAgBT,GAAgByD,CAAgB,GAE9CO,IAAiB,CAAAC,MAAgB;AACrC,YAAMC,IAAmB,CAAA,GACnBC,IAAiB,CAAA;AAEvB,aAAAF,EAAa,QAAQ,CAAAtN,MAAO;AAC1B,QAAI+J,EAAc,MAAM,IAAI/J,CAAG,IAC7BwN,EAAe,KAAKxN,CAAG,IAEvBuN,EAAiB,KAAKvN,CAAG;AAAA,MAEnC,CAAO,GACM;AAAA,QACL,kBAAAuN;AAAA,QACA,gBAAAC;AAAA,MACR;AAAA,IACA,GAEUC,IAAmB1C,GAAkB1B,GAAgB0D,GAAmB;AAAA,MAC5E,YAAYD;AAAA,MACZ,oBAAoBJ,GAAMvM,GAAO,oBAAoB;AAAA,MACrD,gBAAgBuM,GAAMvM,GAAO,gBAAgB;AAAA,IACnD,CAAK,GAEKuN,IAAW,CAAA5N,MAAQ;AACvB,UAAIA,GAAM;AACR,YAAIK,EAAM;AACR,iBAAOL,EAAKK,EAAM,iBAAiB;AAGrC,cAAM;AAAA,UACJ,QAAQwN;AAAA,QAClB,IAAYb,EAAiB;AACrB,iBAAS9G,IAAI,GAAGA,IAAI2H,EAAU,QAAQ3H,KAAK,GAAG;AAC5C,gBAAMgB,IAAQlH,EAAK6N,EAAU3H,CAAC,CAAC;AAC/B,cAAIgB,MAAU;AACZ,mBAAOA;AAAA,QAEV;AAAA,MACF;AAAA,IACP,GAEU4G,IAAkB,CAAAC,MACP7O,GAAQ6O,CAAW,EACpB,IAAI,CAAA7N,MACZoM,GAAWpM,CAAG,IACT;AAAA,MACL,OAAOA;AAAA,IACnB,IAEeA,CACR,GAEG8N,IAAsB,CAAAD,MACXD,EAAgBC,CAAW,EAC5B,IAAI,CAAA/N,MAAQ;AACxB,UAAI;AAAA,QACF,OAAOiO;AAAA,MACR,IAAGjO;AACJ,YAAM;AAAA,QACJ,OAAOkO;AAAA,QACP,aAAaC;AAAA,MACd,IAAGnO;AACJ,UAAIoO;AACJ,YAAM1I,IAASuE,EAAc,MAAM,IAAIiE,CAAQ;AAE/C,aAAIxI,MACFuI,IAAWA,KAAsDL,EAASlI,EAAO,IAAI,GACrF0I,IAAc1I,EAAO,KAAK,WAErB;AAAA,QACL,OAAOuI;AAAA,QACP,OAAOC;AAAA,QACP,aAAaC;AAAA,QACb,UAAUC;AAAA,MACpB;AAAA,IACA,CAAO,GAGG,CAACC,GAAeC,CAAgB,IAAInB,GAAe9M,EAAM,cAAc;AAAA,MAC3E,OAAOuM,GAAMvM,GAAO,OAAO;AAAA,IACjC,CAAK,GACKkO,IAAwB5M,EAAS,MAAMmM,EAAgBO,EAAc,KAAK,CAAC,GAE3E7D,IAAmBlI,EAAW,CAAA,CAAE,GAChCkM,IAAuBlM,EAAW,CAAA,CAAE;AAC1C,IAAA4H,GAAY,MAAM;AAChB,YAAMuE,IAAkB,CAAA,GAClBC,IAAkB,CAAA;AACxB,MAAAH,EAAsB,MAAM,QAAQ,CAAAvO,MAAQ;AAC1C,QAAIA,EAAK,cACP0O,EAAgB,KAAK1O,CAAI,IAEzByO,EAAgB,KAAKzO,CAAI;AAAA,MAEnC,CAAO,GACDwK,EAAiB,QAAQiE,GACzBD,EAAqB,QAAQE;AAAA,IACnC,CAAK;AAED,UAAMC,IAAYhN,EAAS,MAAM6I,EAAiB,MAAM,IAAI,CAAAxK,MAAQA,EAAK,KAAK,CAAC,GACzE;AAAA,MACJ,UAAA2K;AAAA,MACA,eAAAC;AAAA,IACN,IAAQgE,GAAYpJ,CAAW,GAErB,CAACqJ,GAAkBpE,EAAoB,IAAIF,GAAeC,GAAkBgE,GAAsB9D,GAAgBlF,GAAamF,GAAUC,EAAa,GAEtJkE,KAAgBnN,EAAS,MAAM;AASnC,YAAMoN,IAPc1J,GAAqBwJ,EAAiB,OAAOxO,EAAM,qBAAqBmF,EAAY,OAAOwH,EAAiB,KAAK,EAE1G,IAAI,CAAA7J,MAAO;AACpC,YAAIlB,GAAIc,GAAIyD;AACZ,gBAAQA,KAAMzD,KAAMd,IAAKuD,EAAY,MAAMrC,CAAG,OAAO,QAAQlB,MAAO,SAAS,SAASA,EAAG,UAAU,QAAQc,MAAO,SAAS,SAASA,EAAGiK,EAAiB,MAAM,KAAK,OAAO,QAAQxG,MAAO,SAASA,IAAKrD;AAAA,MAC/M,CAAO,EAE4B,IAAI,CAAAjD,MAAO;AACtC,cAAM8O,IAAaxE,EAAiB,MAAM,KAAK,CAAAxK,MAAQA,EAAK,UAAUE,CAAG;AACzE,eAAO;AAAA,UACL,OAAOA;AAAA,UACP,OAAO8O,KAAe,OAAgC,SAASA,EAAW;AAAA,QACpF;AAAA,MACA,CAAO,GACKC,IAAmBjB,EAAoBe,CAAa,GACpDG,IAAWD,EAAiB,CAAC;AACnC,aAAI,CAAClC,EAAe,SAASmC,KAAYjP,GAAMiP,EAAS,KAAK,KAAKjP,GAAMiP,EAAS,KAAK,IAC7E,KAEFD,EAAiB,IAAI,CAAAjP,MAAQ;AAClC,YAAIiC;AACJ,eAAOgD,EAASA,EAAS,CAAE,GAAEjF,CAAI,GAAG;AAAA,UAClC,QAAQiC,IAAKjC,EAAK,WAAW,QAAQiC,MAAO,SAASA,IAAKjC,EAAK;AAAA,QACzE,CAAS;AAAA,MACT,CAAO;AAAA,IACP,CAAK,GACK,CAACmP,EAAmB,IAAI1F,GAASqF,EAAa,GAE9CM,KAAgB,CAAC5B,GAAc/F,GAAO4H,MAAW;AACrD,YAAMN,IAAgBf,EAAoBR,CAAY;AAOtD,UANAc,EAAiBS,CAAa,GAE1B1O,EAAM,wBACR6M,EAAe,EAAE,GAGf7M,EAAM,UAAU;AAClB,YAAIiP,IAAc9B;AAClB,QAAI9C,EAAe,UAEjB4E,IADyBjK,GAAqBmI,GAAcnN,EAAM,qBAAqBmF,EAAY,OAAOwH,EAAiB,KAAK,EACjG,IAAI,CAAA7J,OAAO;AACxC,gBAAMuC,KAASuE,EAAc,MAAM,IAAI9G,EAAG;AAC1C,iBAAOuC,KAASA,GAAO,KAAKsH,EAAiB,MAAM,KAAK,IAAI7J;AAAA,QACxE,CAAW;AAEH,cAAM;AAAA,UACJ,cAAAuE;AAAA,UACA,UAAA6H;AAAA,QACD,IAAG9H,KAAS;AAAA,UACX,cAAc;AAAA,UACd,UAAU;AAAA,QACpB;AACQ,YAAI+H,IAAkBF;AAEtB,YAAIjP,EAAM,mBAAmB;AAC3B,gBAAMoP,IAAajB,EAAqB,MAAM,OAAO,CAAAxO,OAAQ,CAACsP,EAAY,SAAStP,GAAK,KAAK,CAAC;AAC9F,UAAAwP,IAAkB,CAAC,GAAGA,GAAiB,GAAGC,CAAU;AAAA,QACrD;AACD,cAAMC,IAAsB1B,EAAoBwB,CAAe,GACzDG,IAAiB;AAAA;AAAA,UAErB,UAAUnF,EAAiB;AAAA,UAC3B,cAAA9C;AAAA,QACV;AAIQ,YAAIE,KAAe;AACnB,SAAIvH,EAAM,qBAAqBgP,MAAW,eAAe,CAACE,OACxD3H,KAAe,KAEjBJ,GAAmBmI,GAAgBjI,GAAc8F,GAAcjE,EAAe,OAAO3B,IAAcoF,EAAiB,KAAK,GACrHH,EAAgB,QAClB8C,EAAe,UAAUJ,IAEzBI,EAAe,WAAWJ;AAE5B,cAAMK,IAAe9C,EAAmB,QAAQ4C,IAAsBA,EAAoB,IAAI,CAAA1P,MAAQA,EAAK,KAAK;AAChH,QAAAK,EAAM,SAAS0M,EAAe,QAAQ6C,IAAeA,EAAa,CAAC,GAAG9C,EAAmB,QAAQ,OAAO4C,EAAoB,IAAI,CAAA1P,MAAQA,EAAK,KAAK,GAAG2P,CAAc;AAAA,MACpK;AAAA,IACP,GAGUE,IAAiB,CAACC,GAAahN,MAAU;AAC7C,UAAI;AAAA,QACF,UAAAyM;AAAA,QACA,QAAAF;AAAA,MACD,IAAGvM;AACJ,UAAIb,GAAIc,GAAIyD;AACZ,YAAMuJ,IAAmBvN,GAAMgD,EAAY,KAAK,GAC1CwK,IAAqBxN,GAAMyH,EAAc,KAAK,GAC9CvE,IAASqK,EAAiBD,CAAW,GACrCpQ,KAAOgG,KAAW,OAA4B,SAASA,EAAO,MAC9DuK,KAAiBhO,IAAKvC,MAAS,OAA0B,SAASA,GAAKsN,EAAiB,MAAM,KAAK,OAAO,QAAQ/K,MAAO,SAASA,IAAK6N;AAE7I,UAAI,CAAC/C,EAAe;AAElB,QAAAqC,GAAc,CAACa,CAAa,GAAG;AAAA,UAC7B,UAAU;AAAA,UACV,cAAcA;AAAA,QACf,GAAE,QAAQ;AAAA,WACN;AACL,YAAIzC,IAAe+B,IAAW,CAAC,GAAGZ,EAAU,OAAOsB,CAAa,IAAIpB,EAAiB,MAAM,OAAO,CAAAlI,OAAKA,OAAMsJ,CAAa;AAE1H,YAAIvF,EAAe,OAAO;AAExB,gBAAM;AAAA,YACJ,kBAAA+C;AAAA,YACA,gBAAAC;AAAA,UACZ,IAAcH,EAAeC,CAAY,GACzB0C,KAAUxC,GAAe,IAAI,CAAAxN,OAAO8P,EAAmB,IAAI9P,EAAG,EAAE,GAAG;AAEzE,cAAI4B;AACJ,UAAIyN,IACD;AAAA,YACC,aAAAzN;AAAA,UACd,IAAgBkJ,GAAakF,IAAS,IAAMH,GAAkBpF,EAAS,OAAOC,GAAc,KAAK,IAEpF;AAAA,YACC,aAAA9I;AAAA,UACd,IAAgBkJ,GAAakF,IAAS;AAAA,YACxB,SAAS;AAAA,YACT,iBAAiBzF,GAAqB;AAAA,UACvC,GAAEsF,GAAkBpF,EAAS,OAAOC,GAAc,KAAK,GAG1D4C,IAAe,CAAC,GAAGC,IAAkB,GAAG3L,GAAY,IAAI,CAAAqB,OAAO4M,EAAiB5M,EAAG,EAAE,KAAK6J,EAAiB,MAAM,KAAK,CAAC,CAAC;AAAA,QACzH;AACD,QAAAoC,GAAc5B,GAAc;AAAA,UAC1B,UAAA+B;AAAA,UACA,cAAcU;AAAA,QACxB,GAAWZ,KAAU,QAAQ;AAAA,MACtB;AAED,MAAIE,KAAY,CAACxC,EAAe,SAC7BhK,IAAK1C,EAAM,cAAc,QAAQ0C,MAAO,UAAkBA,EAAG,KAAK1C,GAAO4P,GAAe3I,GAAgB5H,EAAI,CAAC,KAE7G8G,IAAKnG,EAAM,gBAAgB,QAAQmG,MAAO,UAAkBA,EAAG,KAAKnG,GAAO4P,GAAe3I,GAAgB5H,EAAI,CAAC;AAAA,IAExH,GAEUyQ,KAAkC,CAAAtM,MAAQ;AAC9C,UAAIxD,EAAM,yBAAyB;AACjC,cAAM+P,IAAc,CAAA;AACpB,eAAO,eAAeA,GAAa,sBAAsB;AAAA,UACvD,MAAM;AACJ,mBAAA3J,EAAQ,IAAO,6DAA6D,GACrE;AAAA,UACR;AAAA,QACX,CAAS,GACDpG,EAAM,wBAAwBwD,GAAMuM,CAAW;AAAA,MAChD;AAAA,IACP,GAEUC,KAAwB,CAACC,GAAWC,MAAS;AACjD,YAAM/C,IAAe8C,EAAU,IAAI,CAAAtQ,MAAQA,EAAK,KAAK;AACrD,UAAIuQ,EAAK,SAAS,SAAS;AACzB,QAAAnB,GAAc5B,GAAc,IAAI,WAAW;AAC3C;AAAA,MACD;AAED,MAAI+C,EAAK,OAAO,UACdV,EAAeU,EAAK,OAAO,CAAC,EAAE,OAAO;AAAA,QACnC,UAAU;AAAA,QACV,QAAQ;AAAA,MAClB,CAAS;AAAA,IAET,GACU;AAAA,MACJ,oBAAArF;AAAA;AAAA,MAEA,UAAAzG;AAAA,MACA,gBAAAC;AAAA,MACA,YAAAE;AAAA;AAAA,MAEA,sBAAAR;AAAA,MACA,kBAAAoM;AAAA,MACA,yBAAAC;AAAA,MACA,cAAAC;AAAA;AAAA,MAEA,SAAAzM;AAAA,MACA,YAAAF;AAAA,MACA,gBAAAC;AAAA;AAAA,MAEA,UAAAQ;AAAA,MACA,UAAAH;AAAA,MACA,cAAAC;AAAA,MACA,cAAAC;AAAA,MACA,YAAAI;AAAA,MACA,aAAAgM;AAAA,MACA,0BAAAzM;AAAA,MACA,kBAAAC;AAAA,IACN,IAAQyM,GAAOvQ,CAAK;AAChB,IAAAwQ,GAA8BC,GAAW;AAAA,MACvC,WAAWjE;AAAA,MACX,UAAApI;AAAA,MACA,gBAAAC;AAAA,MACA,YAAAE;AAAA,MACA,aAAaiK;AAAA,MACb,iBAAiBpE;AAAA,MACjB,sBAAArG;AAAA,MACA,kBAAAoM;AAAA,MACA,yBAAAC;AAAA,MACA,cAAAC;AAAA,MACA,UAAArM;AAAA,MACA,YAAAM;AAAA,MACA,cAAAL;AAAA,MACA,cAAAC;AAAA,MACA,UAAAC;AAAA,MACA,oBAAA0G;AAAA,MACA,aAAA1F;AAAA,MACA,aAAAmL;AAAA,IACD,CAAA,CAAC,GACFvQ,GAAwB0Q,GAAW;AAAA,MACjC,SAAA7M;AAAA,MACA,YAAAF;AAAA,MACA,gBAAAC;AAAA,MACA,UAAU2J;AAAA,MACV,YAAYX;AAAA,MACZ,UAAU6C;AAAA,MACV,0BAAA3L;AAAA,MACA,kBAAAC;AAAA,IACD,CAAA,CAAC;AACF,UAAM4M,IAAYzP;AAClB,WAAAP,EAAO;AAAA,MACL,QAAQ;AACN,YAAIkB;AACJ,SAACA,IAAK8O,EAAU,WAAW,QAAQ9O,MAAO,UAAkBA,EAAG,MAAK;AAAA,MACrE;AAAA,MACD,OAAO;AACL,YAAIA;AACJ,SAACA,IAAK8O,EAAU,WAAW,QAAQ9O,MAAO,UAAkBA,EAAG,KAAI;AAAA,MACpE;AAAA,MACD,SAAS+O,GAAK;AACZ,YAAI/O;AACJ,SAACA,IAAK8O,EAAU,WAAW,QAAQ9O,MAAO,UAAkBA,EAAG,SAAS+O,CAAG;AAAA,MAC5E;AAAA,IACP,CAAK,GACM,MAAM;AACX,UAAI/O;AACJ,YAAMgP,IAAY9E,GAAK9L,GAAO;AAAA,QAAC;AAAA,QAAM;AAAA,QAAa;AAAA;AAAA,QAElD;AAAA,QAAS;AAAA,QAAgB;AAAA,QAAY;AAAA,QAAY;AAAA;AAAA,QAEjD;AAAA,QAAe;AAAA,QAAc;AAAA,QAAY;AAAA,QAAwB;AAAA,QAAkB;AAAA;AAAA,QAEnF;AAAA,QAAuB;AAAA;AAAA,QAEvB;AAAA,QAAY;AAAA,QAAiB;AAAA,QAAqB;AAAA;AAAA,QAElD;AAAA;AAAA,QAEA;AAAA,QAAsB;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAkB;AAAA;AAAA,QAE5E;AAAA,QAAwB;AAAA,QAAoB;AAAA,QAA2B;AAAA;AAAA,QAEvE;AAAA,QAAW;AAAA,QAAc;AAAA,QAAkB;AAAA;AAAA,QAE3C;AAAA,QAAY;AAAA,QAAY;AAAA,QAAgB;AAAA,QAAgB;AAAA,MAAY,CAAC;AACrE,aAAOwE,EAAaqM,IAAYlM,EAAcA,EAAcA,EAAc;AAAA,QACxE,KAAO+L;AAAA,MACR,GAAEtE,CAAK,GAAGwE,CAAS,GAAG,IAAI;AAAA,QACzB,IAAMvE;AAAA,QACN,WAAarM,EAAM;AAAA,QACnB,MAAQ0M,EAAe,QAAQ,aAAa;AAAA,QAC5C,eAAiBoC,GAAoB;AAAA,QACrC,uBAAyBkB;AAAA,QACzB,aAAepD,EAAkB;AAAA,QACjC,UAAYI;AAAA,QACZ,YAAc3M;AAAA,QACd,cAAgB,CAAC6I,EAAe,MAAM;AAAA,QACtC,yBAA2B4G;AAAA,QAC3B,WAAa9P,EAAM,aAAaS,EAAM;AAAA,QACtC,2BAA6BmB,IAAK5B,EAAM,8BAA8B,QAAQ4B,MAAO,SAASA,IAAK;AAAA,MAC3G,CAAO,GAAGnB,CAAK;AAAA,IACf;AAAA,EACG;AACH,CAAC,GC3lBKqQ,KAAe,CAAAC,MAAS;AAC5B,QAAM;AAAA,IACJ,cAAAC;AAAA,IACA,eAAAC;AAAA,IACA,iBAAAC;AAAA,EACD,IAAGH,GACEI,IAAU,IAAIF,CAAa;AACjC,SAAO;AAAA;AAAA;AAAA;AAAA,IAIP;AAAA,MACE,CAAC,GAAGD,CAAY,WAAW,GAAG;AAAA,QAAC;AAAA,UAC7B,SAAS,GAAGD,EAAM,SAAS,MAAMA,EAAM,YAAY,CAAC;AAAA,QACrD;AAAA;AAAA,QAEDK,GAAaH,GAAeI,GAAWN,GAAO;AAAA,UAC5C,kBAAkBG;AAAA,QACnB,CAAA,CAAC;AAAA,QAAG;AAAA,UACH,CAACC,CAAO,GAAG;AAAA,YACT,cAAc;AAAA,YACd,uBAAuB;AAAA,cACrB,YAAY;AAAA,cACZ,CAAC,GAAGA,CAAO,WAAW,GAAG;AAAA,gBACvB,CAAC,GAAGA,CAAO,uBAAuB,GAAG;AAAA,kBACnC,MAAM;AAAA,gBACP;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA;AAAA,QAEDG,GAAiB,GAAGL,CAAa,aAAaF,CAAK;AAAA;AAAA,QAEnD;AAAA,UACE,SAAS;AAAA,YACP,WAAW;AAAA,YACX,CAAC,GAAGI,CAAO,YAAYA,CAAO,iBAAiB,GAAG;AAAA,cAChD,CAAC,GAAGA,CAAO,oBAAoB,GAAG;AAAA,gBAChC,WAAW;AAAA,cACZ;AAAA,YACF;AAAA,UACF;AAAA,QACP;AAAA,MAAK;AAAA,IACL;AAAA,EAAG;AACH;AAEe,SAASI,GAAmBlO,GAAW4N,GAAe;AACnE,SAAOO,GAAsB,cAAc,CAAAT,MAAS;AAClD,UAAMU,IAAkBJ,GAAWN,GAAO;AAAA,MACxC,eAAeE,EAAc;AAAA,IACnC,CAAK;AACD,WAAO,CAACH,GAAaW,CAAe,CAAC;AAAA,EACzC,CAAG,EAAEpO,CAAS;AACd;AClCA,MAAMqO,KAAoB,CAACC,GAAeC,GAAQC,MAC5CA,MAAmB,SACdA,IAEF,GAAGF,CAAa,IAAIC,CAAM;AAE5B,SAAS/F,KAAkB;AAChC,SAAOjH,EAASA,EAAS,CAAE,GAAEkH,GAAKgG,GAAiB,GAAI,CAAC,gBAAgB,cAAc,aAAa,mBAAmB,YAAY,aAAa,CAAC,CAAC,GAAG;AAAA,IAClJ,YAAY9F,GAAU;AAAA,IACtB,MAAM+F,GAAY;AAAA,IAClB,UAAUC,GAAa;AAAA,IACvB,UAAUC,GAAS,CAAC,SAAS,MAAM,CAAC;AAAA,IACpC,eAAeC,GAAY;AAAA,IAC3B,WAAWH,GAAY;AAAA,IACvB,QAAQA,GAAY;AAAA,IACpB,gBAAgB;AAAA;AAAA,IAEhB,mBAAmB;AAAA,IACnB,kBAAkBI,GAAc;AAAA,IAChC,6BAA6BA,GAAc;AAAA,IAC3C,wBAAwBA,GAAc;AAAA,EAC1C,CAAG;AACH;AACA,MAAMC,KAAa9R,GAAgB;AAAA,EACjC,cAAc;AAAA,IACZ,MAAM;AAAA,EACP;AAAA,EACD,MAAM;AAAA,EACN,cAAc;AAAA,EACd,OAAO6L,GAAiBN,MAAmB;AAAA,IACzC,sBAAsB;AAAA,IACtB,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,UAAU;AAAA,EACd,CAAG;AAAA,EACD,OAAO;AAAA,EACP,MAAM7L,GAAOQ,GAAM;AACjB,QAAI;AAAA,MACF,OAAA4L;AAAA,MACA,OAAA3L;AAAA,MACA,QAAAC;AAAA,MACA,MAAA2R;AAAA,IACD,IAAG7R;AACJ,IAAA4F,EAAQ,EAAEpG,EAAM,aAAa,UAAaS,EAAM,UAAU,wEAAwE,GAClI6R,GAAWtS,EAAM,aAAa,MAAS,CAACA,EAAM,eAAe,cAAc,+DAA+D,GAC1IsS,GAAWtS,EAAM,kBAAkB,QAAW,cAAc,8DAA8D,GAC1HsS,GAAW,CAACtS,EAAM,mBAAmB,cAAc,yEAAyE;AAC5H,UAAMuS,IAAkBC,MAClBC,IAAuBC,GAAqB,aAC5CC,IAAerR,EAAS,MAAMsR,GAAgBH,EAAqB,QAAQzS,EAAM,MAAM,CAAC,GACxF;AAAA,MACJ,WAAAqD;AAAA,MACA,aAAAwP;AAAA,MACA,WAAAC;AAAA,MACA,SAAAlP;AAAA,MACA,0BAAAC;AAAA,MACA,MAAMkP;AAAA,MACN,mBAAAC;AAAA,MACA,cAAAC;AAAA,MACA,UAAAxM;AAAA,IACN,IAAQyM,GAAgB,UAAUlT,CAAK,GAC7B;AAAA,MACJ,aAAAmT;AAAA,MACA,uBAAAC;AAAA,IACN,IAAQC,GAAsBhQ,GAAWyP,CAAS,GACxCQ,IAAahS,EAAS,MAAM6R,EAAY,SAASJ,EAAY,KAAK,GAClEQ,IAAkBC,MAClBC,IAAiBnS,EAAS,MAAM;AACpC,UAAIM;AACJ,cAAQA,IAAK6E,EAAS,WAAW,QAAQ7E,MAAO,SAASA,IAAK2R,EAAgB;AAAA,IACpF,CAAK,GACK5B,IAAgBrQ,EAAS,MAAM2R,EAAc,CAAA,GAE7CS,IAAYpS,EAAS,MACrBtB,EAAM,cAAc,SACfA,EAAM,YAER8S,EAAU,UAAU,QAAQ,gBAAgB,YACpD,GACKjB,IAAiBvQ,EAAS,MAAMoQ,GAAkBC,EAAc,OAAOgC,GAAuBD,EAAU,KAAK,GAAG1T,EAAM,cAAc,CAAC,GACrI4T,IAAuBtS,EAAS,MAAMoQ,GAAkBC,EAAc,OAAO,IAAI3R,EAAM,oBAAoB,CAAC,GAC5GiR,IAAgB3P,EAAS,MAAM2R,EAAa,eAAejT,EAAM,SAAS,CAAC,GAC3E6T,IAAsBvS,EAAS,MAAM2R,EAAa,eAAejT,EAAM,SAAS,CAAC,GAEjF,CAAC8T,IAAeC,CAAM,IAAIC,GAAe3Q,CAAS,GAClD,CAAC4Q,EAAiB,IAAIC,GAASL,GAAqB5C,CAAa,GACjEkD,KAA0B7S,EAAS,MAAM8S,GAAWpU,EAAM,kBAAkBA,EAAM,mBAAmB,GAAG6T,EAAoB,KAAK,aAAa;AAAA,MAClJ,CAAC,GAAGA,EAAoB,KAAK,eAAe,GAAGf,EAAU,UAAU;AAAA,IACzE,GAAOiB,EAAO,KAAK,CAAC,GACVM,KAAa/S,EAAS,MAAM,CAAC,EAAEtB,EAAM,iBAAiBA,EAAM,SAAS,GACrEsU,KAAkBhT,EAAS,MAAMtB,EAAM,cAAc,SAAYA,EAAM,YAAYA,EAAM,WAAW,CAACqU,GAAW,KAAK,GACrHE,IAAgBtT;AACtB,IAAAP,EAAO;AAAA,MACL,QAAQ;AACN,YAAIkB,GAAIc;AACR,SAACA,KAAMd,IAAK2S,EAAc,OAAO,WAAW,QAAQ7R,MAAO,UAAkBA,EAAG,KAAKd,CAAE;AAAA,MACxF;AAAA,MACD,OAAO;AACL,YAAIA,GAAIc;AACR,SAACA,KAAMd,IAAK2S,EAAc,OAAO,UAAU,QAAQ7R,MAAO,UAAkBA,EAAG,KAAKd,CAAE;AAAA,MACvF;AAAA,IACP,CAAK;AACD,UAAM4S,KAAe,WAAY;AAC/B,eAASzR,IAAO,UAAU,QAAQC,IAAO,IAAI,MAAMD,CAAI,GAAGE,IAAO,GAAGA,IAAOF,GAAME;AAC/E,QAAAD,EAAKC,CAAI,IAAI,UAAUA,CAAI;AAE7B,MAAAoP,EAAK,gBAAgBrP,EAAK,CAAC,CAAC,GAC5BqP,EAAK,UAAU,GAAGrP,CAAI,GACtBuP,EAAgB,cAAa;AAAA,IACnC,GACUkC,KAAmB,CAAAjV,MAAQ;AAC/B,MAAA6S,EAAK,2BAA2B7S,CAAI,GACpC6S,EAAK,cAAc7S,CAAI;AAAA,IAC7B,GACUkV,KAAe,CAAA5V,MAAS;AAC5B,MAAAuT,EAAK,sBAAsBvT,CAAK,GAChCuT,EAAK,UAAUvT,CAAK;AAAA,IAC1B,GACU6V,KAAa,CAAAjP,MAAK;AACtB,MAAA2M,EAAK,QAAQ3M,CAAC,GACd6M,EAAgB,YAAW;AAAA,IACjC;AACI,WAAO,MAAM;AACX,UAAI3Q,GAAIc,GAAIyD;AACZ,YAAM;AAAA,QACJ,iBAAA1C,KAAmB7B,IAAKnB,EAAM,qBAAqB,QAAQmB,MAAO,SAAS,SAASA,EAAG,KAAKnB,CAAK;AAAA,QACjG,WAAWmU;AAAA,QACX,UAAAC;AAAA,QACA,YAAAnR;AAAA,QACA,gBAAAC;AAAA,QACA,UAAAL;AAAA,QACA,UAAAU;AAAA,QACA,UAAAG;AAAA,QACA,WAAA2Q;AAAA,QACA,cAAA5Q,MAAgBxB,IAAKjC,EAAM,kBAAkB,QAAQiC,MAAO,SAAS,SAASA,EAAG,KAAKjC,CAAK;AAAA,QAC3F,YAAAzB,KAAagB,EAAM;AAAA,QACnB,IAAAyI,KAAK8J,EAAgB,GAAG;AAAA,QACxB,aAAAwC,MAAe5O,IAAK1F,EAAM,iBAAiB,QAAQ0F,MAAO,SAAS,SAASA,EAAG,KAAK1F,CAAK;AAAA,MAC1F,IAAGT,GACE;AAAA,QACJ,iBAAAgV;AAAA,QACA,aAAAC;AAAA,QACA,cAAAC;AAAA,MACD,IAAGzC,GAEE;AAAA,QACJ,YAAA0C;AAAA,QACA,YAAAC;AAAA,QACA,WAAAC;AAAA,MACD,IAAGC,GAAS1Q,EAASA,EAAS,CAAE,GAAE5E,CAAK,GAAG;AAAA,QACzC,UAAUqU,GAAW;AAAA,QACrB,WAAWC,GAAgB;AAAA,QAC3B,aAAAW;AAAA,QACA,cAAAC;AAAA,QACA,WAAW7R,EAAU;AAAA,MAC7B,CAAO,GAAG5C,CAAK;AAET,UAAI8U;AACJ,MAAI9R,MAAoB,SACtB8R,IAAiB9R,IAEjB8R,IAAiB1C,EAAY,QAAQ;AAGvC,YAAM2C,IAAc1J,GAAK9L,GAAO,CAAC,cAAc,YAAY,cAAc,aAAa,gBAAgB,YAAY,UAAU,kBAAkB,6BAA6B,sBAAsB,CAAC,GAC5LyV,IAAkBrB,GAAW,CAACQ,MAAsBf,EAAoB,OAAO;AAAA,QACnF,CAAC,GAAGxQ,EAAU,KAAK,KAAK,GAAGiQ,EAAW,UAAU;AAAA,QAChD,CAAC,GAAGjQ,EAAU,KAAK,KAAK,GAAGiQ,EAAW,UAAU;AAAA,QAChD,CAAC,GAAGjQ,EAAU,KAAK,MAAM,GAAGyP,EAAU,UAAU;AAAA,QAChD,CAAC,GAAGzP,EAAU,KAAK,aAAa,GAAG,CAACwR;AAAA,QACpC,CAAC,GAAGxR,EAAU,KAAK,eAAe,GAAG2R;AAAA,MACtC,GAAEU,GAAoBrS,EAAU,OAAOsP,EAAa,OAAOsC,CAAW,GAAG7B,EAAsB,OAAOhH,EAAM,OAAO2H,EAAO,KAAK,GAC1H4B,IAAa,CAAA;AACnB,aAAI3V,EAAM,aAAa,UAAaS,EAAM,YACxCkV,EAAW,WAAWC,GAAgBnV,EAAM,QAAS,CAAA,IAEhDqT,GAAcG,GAAkBzP,EAAaqR,IAAclR,EAAcA,EAAcA,EAAcA,EAAc,CAAA,GAAIyH,CAAK,GAAGoJ,CAAW,GAAG,CAAA,GAAI;AAAA,QACtJ,UAAY/B,EAAe;AAAA,QAC3B,SAAW7P,EAAQ;AAAA,QACnB,0BAA4BC,EAAyB;AAAA,QACrD,IAAM4E;AAAA,QACN,YAAczJ;AAAA,QACd,KAAOuV;AAAA,QACP,WAAalR,EAAU;AAAA,QACvB,OAASoS;AAAA,QACT,YAAc/R;AAAA,QACd,gBAAkBC;AAAA,QAClB,UAAY,CAAC,CAACQ;AAAA,QACd,WAAagR;AAAA,QACb,UAAY7R;AAAA,QACZ,YAAc8R;AAAA,QACd,WAAaC;AAAA,QACb,cAAgB,CAAAS,MAAaC,GAAmB9E,EAAc,OAAO/M,IAAc4R,GAAWrV,EAAM,UAAU0D,EAAQ;AAAA,QACtH,cAAgBH;AAAA,QAChB,iBAAmBuR;AAAA,QACnB,mBAAqBvC,KAAsB,OAAuC,SAASA,EAAkB;AAAA,QAC7G,YAAc;AAAA,QACd,mBAAqBmB,GAAwB;AAAA,QAC7C,sBAAwBP,EAAqB;AAAA,QAC7C,UAAYY;AAAA,QACZ,QAAUG;AAAA,QACV,UAAYD;AAAA,QACZ,cAAgBD;AAAA,MACxB,GAASkB,CAAU,GAAG,IAAI;AAAA,QAClB,gBAAkB9D,EAAe;AAAA,QACjC,aAAejN,EAASA,EAAS,CAAE,GAAEnE,CAAK,GAAG;AAAA,UAC3C,eAAe,MAAM+D,EAAa,QAAQ;AAAA,YACxC,OAAS,GAAGnB,EAAU,KAAK;AAAA,UAC5B,GAAE,IAAI;AAAA,QACjB,CAAS;AAAA,QACD,mBAAqBrD,EAAM,qBAAqBS,EAAM;AAAA,QACtD,WAAaiT,EAAU;AAAA,QACvB,WAAauB,KAAeH;AAAA,QAC5B,aAAeC;AAAA,MAChB,CAAA,GAAGnQ,EAASA,EAAS,CAAE,GAAEnE,CAAK,GAAG;AAAA,QAChC,eAAe,MAAM+D,EAAa,QAAQ;AAAA,UACxC,OAAS,GAAGnB,EAAU,KAAK;AAAA,QAC5B,GAAE,IAAI;AAAA,MACf,CAAO,CAAC,CAAC,CAAC;AAAA,IACV;AAAA,EACG;AACH,CAAC,GAEY2S,KAAiBzQ,IACf0Q,KAAArR,EAASwN,IAAY;AAAA,EAClC,UAAA7M;AAAA,EACA,UAAUV;AAAA,EACV,aAAaC;AAAA,EACb,YAAYC;AAAA,EACZ,SAAS,CAAAmR,OACPA,EAAI,UAAU9D,GAAW,MAAMA,EAAU,GACzC8D,EAAI,UAAUF,GAAe,aAAaA,EAAc,GACjDE;AAEX,CAAC;;;;;;;AC7OD,UAAMlW,IAAQmW,GACR9D,IAAO+D,GAEPC,IAAepV,GAAiC,CAAA,CAAE,GAClDiO,IAAW5N,EAAS;AAAA,MACzB,MAAM;AACL,eAAOtB,EAAM;AAAA,MACd;AAAA,MACA,IAAIlB,GAAO;AACV,QAAAuT,EAAK,gBAAgBvT,CAAK;AAAA,MAC3B;AAAA,IAAA,CACA,GACKwX,IAAUrV,GAAI,EAAK;AA4BjB,YA1BQ,YAAY;AAC3B,MAAAqV,EAAQ,QAAQ;AACZ,UAAA;AACC,YAAA,CAACtW,EAAM,UAAU;AACpB,kBAAQ,MAAM,2BAA2B;AACzC;AAAA,QACD;AACI,YAAAA,EAAM,oBAAoB,UAAU;AACjC,gBAAAuW,IAAiB,MAAMvW,EAAM;AACtB,UAAAqW,EAAA,QAAQE,KAAkB;QAAC,OAClC;AACN,cAAIvW,EAAM,YAAY,CAAC,MAAM,QAAQA,EAAM,QAAQ,GAAG;AAC7C,oBAAA;AAAA,cACP;AAAA,YAAA;AAED;AAAA,UACD;AACa,UAAAqW,EAAA,QAAQrW,EAAM,YAAY,CAAA;AAAA,QACxC;AAAA,eACQwW,GAAO;AACf,gBAAQ,MAAMA,CAAK;AAAA,MACpB;AACA,MAAAF,EAAQ,QAAQ,IAChBpH,EAAS,QAAQlP,EAAM;AAAA,IAAA;;;;;;;;","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}