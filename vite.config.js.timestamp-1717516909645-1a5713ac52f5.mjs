// vite.config.js
import { defineConfig } from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/vite@5.2.11_@types+node@20.12.11_sass@1.77.0_terser@5.31.0/node_modules/vite/dist/node/index.js";
import { join } from "path";
import dts from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/vite-plugin-dts@3.9.1_@types+node@20.12.11_rollup@4.17.2_typescript@5.4.5_vite@5.2.11_@types+_jcca6uyr3e6ggdthwrn3g366xy/node_modules/vite-plugin-dts/dist/index.mjs";
import vue from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/@vitejs+plugin-vue@5.0.4_vite@5.2.11_@types+node@20.12.11_sass@1.77.0_terser@5.31.0__vue@3.4.27_typescript@5.4.5_/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import AutoImport from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/unplugin-auto-import@0.17.5_rollup@4.17.2/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/unplugin-vue-components@0.27.0_@babel+parser@7.24.5_rollup@4.17.2_vue@3.4.27_typescript@5.4.5_/node_modules/unplugin-vue-components/dist/vite.js";
import { AntDesignVueResolver } from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/unplugin-vue-components@0.27.0_@babel+parser@7.24.5_rollup@4.17.2_vue@3.4.27_typescript@5.4.5_/node_modules/unplugin-vue-components/dist/resolvers.js";
import VueSetupExtend from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/vite-plugin-vue-setup-extend@0.4.0_vite@5.2.11_@types+node@20.12.11_sass@1.77.0_terser@5.31.0_/node_modules/vite-plugin-vue-setup-extend/dist/index.mjs";
import libCss from "file:///D:/Develop/Coding/VueDevelop/qc-components/node_modules/.pnpm/vite-plugin-libcss@1.1.1_vite@5.2.11_@types+node@20.12.11_sass@1.77.0_terser@5.31.0_/node_modules/vite-plugin-libcss/index.js";
var __vite_injected_original_dirname = "D:\\Develop\\Coding\\VueDevelop\\qc-components";
var vite_config_default = defineConfig(({ command, mode }) => {
  return {
    publicPath: "/",
    plugins: [
      // vue({ reactivityTransform: true }),
      vue(),
      //生成ts声明文件
      dts({
        include: ["./qc-components", "./qc-components/types"]
      }),
      AutoImport({
        //安装两行后你会发现在组件中不用再导入ref，reactive等
        imports: ["vue", "vue-router"],
        dts: "src/auto-import.d.ts",
        //ant-design-vue
        resolvers: [AntDesignVueResolver()]
      }),
      Components({
        resolvers: [
          AntDesignVueResolver({
            importStyle: false
            // 不动态引入css,这个不强求
          })
        ]
      }),
      VueSetupExtend(),
      libCss()
    ],
    //设置别名
    resolve: {
      alias: {
        "@/qc-components": join(__vite_injected_original_dirname, "./qc-components/")
      },
      extensions: [".vue", ".js", ".json", ".ts", ".tsx"]
      //使用别名省略的后缀名
    },
    build: {
      outDir: "lib",
      //输出文件名称
      lib: {
        formats: ["es", "cjs", "umd"],
        //指定打包格式
        entry: join(__vite_injected_original_dirname, "./qc-components/index.ts"),
        //指定组件编译入口文件
        name: "QcComponents",
        //指定打包后全局变量的名字
        fileName: (format) => `index.${format}.js`
        // 打包后的文件名
      },
      //库编译模式配置
      rollupOptions: {
        // 确保外部化处理那些你不想打包进库的依赖
        external: ["vue"],
        output: {
          // 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量
          globals: {
            vue: "Vue"
          },
          exports: "named"
          // https://rollupjs.org/configuration-options/#output-exports
        }
      },
      // rollup打包配置
      cssCodeSplit: true
      //是否拆分css
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
